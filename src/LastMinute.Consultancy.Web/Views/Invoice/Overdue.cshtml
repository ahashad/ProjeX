@model IEnumerable<LastMinute.Consultancy.Application.Invoice.InvoiceDto>

@{
    ViewData["Title"] = "Overdue Invoices";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-danger text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="fas fa-exclamation-triangle me-2"></i>Overdue Invoices
                        </h4>
                        <a asp-action="Index" class="btn btn-outline-light">
                            <i class="fas fa-arrow-left me-2"></i>Back to All Invoices
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>@TempData["Success"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>@TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @if (Model.Any())
                    {
                        <!-- Summary Alert -->
                        <div class="alert alert-warning mb-4">
                            <div class="row">
                                <div class="col-md-8">
                                    <h5><i class="fas fa-exclamation-triangle me-2"></i>Payment Required</h5>
                                    <p class="mb-0">
                                        You have <strong>@Model.Count()</strong> overdue invoice(s) totaling 
                                        <strong>$@Model.Sum(i => i.TotalAmount).ToString("N2")</strong> that require immediate attention.
                                    </p>
                                </div>
                                <div class="col-md-4 text-end">
                                    <div class="fs-4 fw-bold text-danger">
                                        $@Model.Sum(i => i.TotalAmount).ToString("N0")
                                    </div>
                                    <small class="text-muted">Total Outstanding</small>
                                </div>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Invoice #</th>
                                        <th>Project</th>
                                        <th>Client</th>
                                        <th>Due Date</th>
                                        <th>Days Overdue</th>
                                        <th>Amount</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var invoice in Model.OrderBy(i => i.DueDate))
                                    {
                                        var daysOverdue = (DateTime.Today - invoice.DueDate).Days;
                                        var severityClass = daysOverdue switch
                                        {
                                            <= 7 => "table-warning",
                                            <= 30 => "table-danger",
                                            _ => "table-dark"
                                        };
                                        
                                        <tr class="@severityClass">
                                            <td>
                                                <strong>@invoice.InvoiceNumber</strong>
                                                @if (daysOverdue > 30)
                                                {
                                                    <span class="badge bg-dark ms-2">Critical</span>
                                                }
                                                else if (daysOverdue > 7)
                                                {
                                                    <span class="badge bg-danger ms-2">Urgent</span>
                                                }
                                            </td>
                                            <td>@invoice.ProjectName</td>
                                            <td>
                                                <strong>@invoice.ClientName</strong>
                                                <br>
                                                <small class="text-muted">Contact required</small>
                                            </td>
                                            <td>
                                                <strong>@invoice.DueDate.ToString("MMM dd, yyyy")</strong>
                                                <br>
                                                <small class="text-muted">@invoice.DueDate.ToString("dddd")</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-danger fs-6">
                                                    @daysOverdue day@(daysOverdue != 1 ? "s" : "")
                                                </span>
                                                @if (daysOverdue > 60)
                                                {
                                                    <br><small class="text-danger"><i class="fas fa-exclamation-triangle"></i> Review needed</small>
                                                }
                                            </td>
                                            <td class="text-end">
                                                <strong class="fs-5">$@invoice.TotalAmount.ToString("N2")</strong>
                                                @if (invoice.TotalAmount > 10000)
                                                {
                                                    <br><small class="text-danger">High value</small>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group">
                                                    <a asp-action="Details" asp-route-id="@invoice.Id" class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <button type="button" class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#paymentModal-@invoice.Id">
                                                        <i class="fas fa-dollar-sign"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-info" onclick="sendReminder('@invoice.Id', '@invoice.ClientName')">
                                                        <i class="fas fa-envelope"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Action Summary -->
                        <div class="row mt-4">
                            <div class="col-md-6">
                                <div class="card border-warning">
                                    <div class="card-header bg-warning">
                                        <h6 class="mb-0">Recommended Actions</h6>
                                    </div>
                                    <div class="card-body">
                                        <ul class="list-unstyled mb-0">
                                            <li><i class="fas fa-phone text-primary me-2"></i>Call clients with invoices overdue >30 days</li>
                                            <li><i class="fas fa-envelope text-info me-2"></i>Send payment reminders for all overdue invoices</li>
                                            <li><i class="fas fa-file-contract text-warning me-2"></i>Review payment terms for frequently overdue clients</li>
                                            <li><i class="fas fa-ban text-danger me-2"></i>Consider service suspension for critical overdue accounts</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card border-info">
                                    <div class="card-header bg-info text-white">
                                        <h6 class="mb-0">Aging Analysis</h6>
                                    </div>
                                    <div class="card-body">
                                        @{
                                            var aging1to7 = Model.Count(i => (DateTime.Today - i.DueDate).Days <= 7);
                                            var aging8to30 = Model.Count(i => (DateTime.Today - i.DueDate).Days > 7 && (DateTime.Today - i.DueDate).Days <= 30);
                                            var aging31to60 = Model.Count(i => (DateTime.Today - i.DueDate).Days > 30 && (DateTime.Today - i.DueDate).Days <= 60);
                                            var aging60plus = Model.Count(i => (DateTime.Today - i.DueDate).Days > 60);
                                        }
                                        <div class="row text-center">
                                            <div class="col-6">
                                                <div class="border rounded p-2 mb-2">
                                                    <div class="fs-4 fw-bold text-warning">@aging1to7</div>
                                                    <small>1-7 days</small>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="border rounded p-2 mb-2">
                                                    <div class="fs-4 fw-bold text-danger">@aging8to30</div>
                                                    <small>8-30 days</small>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="border rounded p-2">
                                                    <div class="fs-4 fw-bold text-dark">@aging31to60</div>
                                                    <small>31-60 days</small>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="border rounded p-2">
                                                    <div class="fs-4 fw-bold text-dark">@aging60plus</div>
                                                    <small>60+ days</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                            <h5 class="text-success">Great! No Overdue Invoices</h5>
                            <p class="text-muted">All your invoices are current or have been paid on time.</p>
                            <a asp-action="Index" class="btn btn-primary">
                                <i class="fas fa-file-invoice me-2"></i>View All Invoices
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payment Modals -->
@foreach (var invoice in Model)
{
    <div class="modal fade" id="paymentModal-@invoice.Id" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <form asp-action="MarkAsPaid" asp-route-id="@invoice.Id" method="post">
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title">Record Payment - @invoice.InvoiceNumber</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            This invoice is <strong>@((DateTime.Today - invoice.DueDate).Days) days overdue</strong>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Payment Amount</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" name="amount" class="form-control" 
                                       step="0.01" max="@invoice.TotalAmount" value="@invoice.TotalAmount" required />
                            </div>
                            <div class="form-text">Invoice total: $@invoice.TotalAmount.ToString("N2")</div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Payment Reference</label>
                            <input type="text" name="paymentReference" class="form-control" 
                                   placeholder="Check number, transaction ID, etc." />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Record Payment</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        function sendReminder(invoiceId, clientName) {
            if (confirm(`Send payment reminder to ${clientName}?`)) {
                // In a real implementation, this would call an API to send email reminder
                alert('Payment reminder sent successfully!');
                
                // You could implement this by adding a controller action:
                // $.post('@Url.Action("SendReminder")', { invoiceId: invoiceId })
                //     .done(function() {
                //         alert('Payment reminder sent successfully!');
                //     })
                //     .fail(function() {
                //         alert('Failed to send reminder. Please try again.');
                //     });
            }
        }

        // Auto-refresh page every 5 minutes to get latest overdue status
        setTimeout(function() {
            location.reload();
        }, 300000);
    </script>

    <style>
        .table-warning td {
            background-color: #fff3cd !important;
        }
        
        .table-danger td {
            background-color: #f8d7da !important;
        }
        
        .table-dark td {
            background-color: #d1ecf1 !important;
            color: #0c5460;
        }
        
        .fs-4 {
            font-size: 1.5rem !important;
        }
        
        .fs-5 {
            font-size: 1.25rem !important;
        }
        
        .fs-6 {
            font-size: 1rem !important;
        }
    </style>
}