@page "/Account/Login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LastMinute.Consultancy.Domain.Entities
@using System.ComponentModel.DataAnnotations
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Login - ProjeX</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <div class="card">
            <div class="card-header text-center">
                <h3>ProjeX</h3>
                <p class="text-muted">Sign in to your account</p>
            </div>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => model.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="model.RememberMe" />
                        <label for="rememberMe" class="form-check-label">Remember me</label>
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Sign In
                        </button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <p class="mb-0">
                    Don't have an account? <a href="/Account/Register">Register here</a>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        // Component initialization
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            var result = await SignInManager.PasswordSignInAsync(
                model.Email, 
                model.Password, 
                model.RememberMe, 
                lockoutOnFailure: false);

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/");
            }
            else if (result.IsLockedOut)
            {
                errorMessage = "Account is locked out.";
            }
            else if (result.IsNotAllowed)
            {
                errorMessage = "Account is not allowed to sign in.";
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during sign in.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}

