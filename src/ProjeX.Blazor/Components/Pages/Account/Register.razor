@page "/Account/Register"
@using Microsoft.AspNetCore.Identity
@using ProjeX.Domain.Entities
@using System.ComponentModel.DataAnnotations
@using System.Threading.Tasks
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Register - ProjeX</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-5">
        <div class="card">
            <div class="card-header text-center">
  <h3>ProjeX</h3>
        <p class="text-muted">Create your account</p>
      </div>
      <div class="card-body">
      <EditForm Model="@model" FormName="RegisterForm" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
       <DataAnnotationsValidator />
         <ValidationSummary />

   @if (!string.IsNullOrEmpty(errorMessage))
   {
           <div class="alert alert-danger">
           @errorMessage
</div>
}

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" class="form-control" @bind-Value="model.FirstName" placeholder="First name" />
                                <ValidationMessage For="@(() => model.FirstName)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" class="form-control" @bind-Value="model.LastName" placeholder="Last name" />
                                <ValidationMessage For="@(() => model.LastName)" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => model.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="model.ConfirmPassword" placeholder="Confirm your password" />
                        <ValidationMessage For="@(() => model.ConfirmPassword)" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Create Account
                        </button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <p class="mb-0">
                    Already have an account? <a href="/Account/Login">Sign in here</a>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel model = new();
  private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
   // Initialize the model with empty values
  model = new RegisterModel();
    }

    private async System.Threading.Tasks.Task HandleValidSubmit()
    {
        isSubmitting = true;
   errorMessage = string.Empty;
        StateHasChanged();

try
        {
     var user = new ApplicationUser
    {
                UserName = model.Email,
   Email = model.Email
         };

    var result = await SignInManager.UserManager.CreateAsync(user, model.Password);

         if (result.Succeeded)
       {
      await SignInManager.SignInAsync(user, isPersistent: false);
         NavigationManager.NavigateTo("/", forceLoad: true);
            }
        else
            {
        errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
    errorMessage = "An error occurred during registration.";
  Console.WriteLine($"Registration error: {ex.Message}");
        }
        finally
        {
         isSubmitting = false;
            StateHasChanged();
        }
    }

    private void HandleInvalidSubmit()
    {
        errorMessage = "Please fix the validation errors below.";
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
    public string FirstName { get; set; } = string.Empty;

      [Required(ErrorMessage = "Last name is required")]
  [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

  [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long.", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

  [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

