@page "/budgets"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Authorization
@using ProjeX.Application.Budget
@using ProjeX.Application.Project
@using ProjeX.Application.Path
@using ProjeX.Domain.Enums
@using ProjeX.Domain.Interfaces
@using System.Security.Claims

@attribute [Authorize(Policy = "ManagerOrAdmin")]
@inject IBudgetService BudgetService
@inject IProjectService ProjectService
@inject IPathService PathService

@code {
    [CascadingParameter]
    private Task<Microsoft.AspNetCore.Components.Authorization.AuthenticationState> AuthenticationStateTask { get; set; } = default!;
}

@inject ICurrentUserService CurrentUserService

<PageTitle>Project Budgets - ProjeX</PageTitle>

<div class="container-fluid">
    <div class="row">
   <div class="col">
<div class="d-flex justify-content-between align-items-center mb-4">
     <h2><i class="fas fa-dollar-sign me-2"></i>Project Budgets</h2>
  <div>
       <select value="@selectedProjectId" @onchange="LoadBudgets" class="form-select d-inline-block me-2" style="width: auto;">
            <option value="">All Projects</option>
 @if (projects != null)
   {
       @foreach (var project in projects)
      {
   <option value="@project.Id">@project.ProjectName</option>
            }
      }
       </select>
     <button class="btn btn-primary" @onclick="ShowCreateModal">
    <i class="fas fa-plus me-2"></i>Add Budget
  </button>
       </div>
     </div>

            @if (isLoading)
  {
       <div class="text-center">
      <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
          </div>
        </div>
    }
      else if (budgets != null && budgets.Any())
         {
   <div class="row">
       @foreach (var budget in budgets)
          {
    <div class="col-lg-6 col-xl-4 mb-4">
    <div class="card h-100">
  <div class="card-header d-flex justify-content-between align-items-center">
     <div>
      <h5 class="card-title mb-0">@budget.CategoryName</h5>
       <small class="text-muted">@budget.ProjectName</small>
   </div>
           <div class="dropdown">
       <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
   <i class="fas fa-ellipsis-v"></i>
   </button>
             <ul class="dropdown-menu">
        <li><a class="dropdown-item" href="#" @onclick="() => ShowEditModal(budget)">
 <i class="fas fa-edit me-2"></i>Edit
      </a></li>
     <li><a class="dropdown-item text-danger" href="#" @onclick="() => ShowDeleteModal(budget)">
                <i class="fas fa-trash me-2"></i>Delete
    </a></li>
   </ul>
          </div>
             </div>
      // ... rest of the card content...
            </div>
 </div>
   }
   </div>
  }
            else
    {
    <div class="text-center py-5">
    <i class="fas fa-dollar-sign fa-3x text-muted mb-3"></i>
   <h4 class="text-muted">No budgets found</h4>
                <p class="text-muted">Create your first budget to start tracking project costs.</p>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
    <i class="fas fa-plus me-2"></i>Create Budget
 </button>
   </div>
         }
        </div>
   </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-lg">
   <div class="modal-content">
            <div class="modal-header">
  <h5 class="modal-title">@(isEdit ? "Edit Budget" : "Create New Budget")</h5>
    <button type="button" class="btn-close" @onclick="HideModal"></button>
      </div>
   <EditForm Model="@budgetRequest" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
 <div class="modal-body">
         // ... form fields would be here using @budgetRequest...
    </div>
    <div class="modal-footer">
          <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
       @if (isSubmitting)
  {
             <span class="spinner-border spinner-border-sm me-2"></span>
       }
     @(isEdit ? "Update" : "Create")
             </button>
     </div>
     </EditForm>
 </div>
    </div>
</div>

@code {
    private List<BudgetDto>? budgets;
  private List<ProjectDto>? projects;
    private List<PathDto>? paths;
    private CreateBudgetRequest budgetRequest = new();
  private UpdateBudgetRequest updateRequest = new();
    private bool showModal = false;
    private bool isEdit = false;
    private bool isLoading = false;
    private bool isSubmitting = false;
    private string selectedProjectId = string.Empty;
    private string currentUserId = string.Empty;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        // Derive userId from authentication state to avoid DbContext usage during init
        var auth = await AuthenticationStateTask;
        if (auth.User.Identity?.IsAuthenticated == true)
        {
            currentUserId = auth.User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "System";
        }
        await LoadProjects();
        await LoadBudgets();
    }

    private async System.Threading.Tasks.Task LoadBudgets()
    {
  isLoading = true;
        try
        {
            if (!string.IsNullOrEmpty(selectedProjectId) && Guid.TryParse(selectedProjectId, out var projectId))
            {
budgets = (await BudgetService.GetByProjectIdAsync(projectId)).ToList();
   }
    else
            {
    budgets = (await BudgetService.GetAllAsync()).ToList();
       }
        }
   catch (Exception ex)
        {
     Console.WriteLine($"Error loading budgets: {ex.Message}");
        budgets = new List<BudgetDto>();
        }
        finally
        {
    isLoading = false;
        }
    }

    private async System.Threading.Tasks.Task LoadProjects()
    {
        try
 {
     projects = (await ProjectService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
     {
   Console.WriteLine($"Error loading projects: {ex.Message}");
        }
    }

    private void ShowCreateModal()
    {
      isEdit = false;
      budgetRequest = new CreateBudgetRequest
     {
   ProjectId = !string.IsNullOrEmpty(selectedProjectId) && Guid.TryParse(selectedProjectId, out var projectId) ? projectId : Guid.Empty,
  PeriodStart = DateTime.Today,
            PeriodEnd = DateTime.Today.AddMonths(1)
        };
        showModal = true;
    }

    private void ShowEditModal(BudgetDto budget)
    {
     isEdit = true;
        budgetRequest = new CreateBudgetRequest
   {
          ProjectId = budget.ProjectId,
         PathId = budget.PathId,
      Category = budget.Category,
       Description = budget.Description,
     PlannedAmount = budget.PlannedAmount,
   ActualAmount = budget.ActualAmount,
       CommittedAmount = budget.CommittedAmount,
         Currency = budget.Currency,
   PeriodStart = budget.PeriodStart,
   PeriodEnd = budget.PeriodEnd,
            Notes = budget.Notes
        };

        updateRequest = new UpdateBudgetRequest
        {
            Id = budget.Id,
    ProjectId = budget.ProjectId,
       PathId = budget.PathId,
            Category = budget.Category,
Description = budget.Description,
            PlannedAmount = budget.PlannedAmount,
            ActualAmount = budget.ActualAmount,
       CommittedAmount = budget.CommittedAmount,
            Currency = budget.Currency,
   PeriodStart = budget.PeriodStart,
  PeriodEnd = budget.PeriodEnd,
     Notes = budget.Notes
        };
  
        showModal = true;
    }

    private async System.Threading.Tasks.Task HandleSubmit()
{
        isSubmitting = true;
        try
        {
         if (isEdit)
          {
         // Copy values from budgetRequest to updateRequest
            updateRequest.ProjectId = budgetRequest.ProjectId;
                updateRequest.PathId = budgetRequest.PathId;
          updateRequest.Category = budgetRequest.Category;
updateRequest.Description = budgetRequest.Description;
        updateRequest.PlannedAmount = budgetRequest.PlannedAmount;
         updateRequest.ActualAmount = budgetRequest.ActualAmount;
                updateRequest.CommittedAmount = budgetRequest.CommittedAmount;
       updateRequest.Currency = budgetRequest.Currency;
         updateRequest.PeriodStart = budgetRequest.PeriodStart;
        updateRequest.PeriodEnd = budgetRequest.PeriodEnd;
                updateRequest.Notes = budgetRequest.Notes;
        
     await BudgetService.UpdateAsync(updateRequest, currentUserId);
   }
       else
   {
       await BudgetService.CreateAsync(budgetRequest, currentUserId);
            }

            await LoadBudgets();
     HideModal();
        }
      catch (Exception ex)
      {
            Console.WriteLine($"Error saving budget: {ex.Message}");
        }
        finally
        {
      isSubmitting = false;
        }
    }

    private void HideModal()
    {
        showModal = false;
        budgetRequest = new CreateBudgetRequest();
   updateRequest = new UpdateBudgetRequest();
    }

    private void ShowDeleteModal(BudgetDto budget)
    {
   // Implementation for delete modal
    }
}

