@page "/budgets"
@page "/projects/{ProjectId:guid}/budgets"
@using ProjeX.Application.Budget
@using ProjeX.Application.Budget.Commands
@using ProjeX.Domain.Enums
@inject IBudgetService BudgetService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Project Budgets</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-dollar-sign me-2"></i>
                        Project Budgets
                        @if (!string.IsNullOrEmpty(ProjectName))
                        {
                            <small class="text-muted">- @ProjectName</small>
                        }
                    </h4>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus me-1"></i>
                        Add Budget Item
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (budgets?.Any() == true)
                    {
                        <!-- Budget Summary Cards -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card bg-primary text-white">
                                    <div class="card-body">
                                        <h6 class="card-title">Total Planned</h6>
                                        <h4 class="mb-0">$@totalPlanned.ToString("N2")</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-success text-white">
                                    <div class="card-body">
                                        <h6 class="card-title">Total Actual</h6>
                                        <h4 class="mb-0">$@totalActual.ToString("N2")</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-warning text-white">
                                    <div class="card-body">
                                        <h6 class="card-title">Total Committed</h6>
                                        <h4 class="mb-0">$@totalCommitted.ToString("N2")</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card @(totalVariance >= 0 ? "bg-danger" : "bg-info") text-white">
                                    <div class="card-body">
                                        <h6 class="card-title">Variance</h6>
                                        <h4 class="mb-0">$@totalVariance.ToString("N2")</h4>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Budget Table -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Category</th>
                                        <th>Description</th>
                                        <th>Path</th>
                                        <th>Period</th>
                                        <th>Planned</th>
                                        <th>Actual</th>
                                        <th>Committed</th>
                                        <th>Variance</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var budget in budgets.OrderBy(b => b.Category).ThenBy(b => b.PeriodStart))
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge @GetCategoryBadgeClass(budget.Category)">
                                                    @budget.CategoryName
                                                </span>
                                            </td>
                                            <td>
                                                <strong>@budget.Description</strong>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(budget.PathName))
                                                {
                                                    <span class="badge bg-info">@budget.PathName</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">General</span>
                                                }
                                            </td>
                                            <td>
                                                <small>
                                                    @budget.PeriodStart.ToString("MMM dd") - @budget.PeriodEnd.ToString("MMM dd, yyyy")
                                                </small>
                                            </td>
                                            <td>
                                                <span class="fw-bold text-primary">$@budget.PlannedAmount.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <span class="fw-bold text-success">$@budget.ActualAmount.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <span class="fw-bold text-warning">$@budget.CommittedAmount.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <span class="fw-bold @(budget.VarianceAmount >= 0 ? "text-danger" : "text-success")">
                                                    $@budget.VarianceAmount.ToString("N2")
                                                    @if (budget.PlannedAmount > 0)
                                                    {
                                                        <small>(@budget.VariancePercentage.ToString("F1")%)</small>
                                                    }
                                                </span>
                                            </td>
                                            <td>
                                                @if (budget.IsApproved)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="fas fa-check me-1"></i>Approved
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(budget.ApprovedByName))
                                                    {
                                                        <br><small class="text-muted">by @budget.ApprovedByName</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="fas fa-clock me-1"></i>Pending
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditBudget(budget)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    @if (!budget.IsApproved)
                                                    {
                                                        <button class="btn btn-sm btn-outline-success" @onclick="() => ApproveBudget(budget.Id)">
                                                            <i class="fas fa-check"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteBudget(budget.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-dollar-sign fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No budget items found</h5>
                            <p class="text-muted">Create your first budget item to get started.</p>
                            <button class="btn btn-primary" @onclick="ShowCreateModal">
                                <i class="fas fa-plus me-1"></i>
                                Add First Budget Item
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show" : "")" style="display: @(showModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @(isEditMode ? "Edit Budget Item" : "Create New Budget Item")
                </h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="budgetCommand" OnValidSubmit="SaveBudget">
                    <DataAnnotationsValidator />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Category *</label>
                                <InputSelect @bind-Value="budgetCommand.Category" class="form-select">
                                    <option value="">Select Category</option>
                                    @foreach (var category in Enum.GetValues<BudgetCategory>())
                                    {
                                        <option value="@category">@category.ToString()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => budgetCommand.Category)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Path</label>
                                <select @bind="budgetCommand.PathId" class="form-select">
                                    <option value="">General (No specific path)</option>
                                    <!-- TODO: Load paths from service -->
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description *</label>
                        <InputText @bind-Value="budgetCommand.Description" class="form-control" placeholder="Enter budget description" />
                        <ValidationMessage For="@(() => budgetCommand.Description)" />
                    </div>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Planned Amount *</label>
                                <InputNumber @bind-Value="budgetCommand.PlannedAmount" class="form-control" min="0" step="0.01" />
                                <ValidationMessage For="@(() => budgetCommand.PlannedAmount)" />
                            </div>
                        </div>
                        @if (isEditMode)
                        {
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Actual Amount</label>
                                    <InputNumber @bind-Value="updateCommand.ActualAmount" class="form-control" min="0" step="0.01" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Committed Amount</label>
                                    <InputNumber @bind-Value="updateCommand.CommittedAmount" class="form-control" min="0" step="0.01" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Currency</label>
                                    <InputText @bind-Value="budgetCommand.Currency" class="form-control" placeholder="USD" />
                                    <ValidationMessage For="@(() => budgetCommand.Currency)" />
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Period Start *</label>
                                <InputDate @bind-Value="budgetCommand.PeriodStart" class="form-control" />
                                <ValidationMessage For="@(() => budgetCommand.PeriodStart)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Period End *</label>
                                <InputDate @bind-Value="budgetCommand.PeriodEnd" class="form-control" />
                                <ValidationMessage For="@(() => budgetCommand.PeriodEnd)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <InputTextArea @bind-Value="budgetCommand.Notes" class="form-control" rows="2" placeholder="Additional notes" />
                        <ValidationMessage For="@(() => budgetCommand.Notes)" />
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            @(isEditMode ? "Update" : "Create") Budget Item
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Guid? ProjectId { get; set; }
    
    private IEnumerable<BudgetDto>? budgets;
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string ProjectName = string.Empty;
    
    private decimal totalPlanned = 0;
    private decimal totalActual = 0;
    private decimal totalCommitted = 0;
    private decimal totalVariance = 0;
    
    private CreateBudgetCommand budgetCommand = new();
    private UpdateBudgetCommand updateCommand = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBudgets();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue)
        {
            await LoadBudgets();
        }
    }

    private async Task LoadBudgets()
    {
        try
        {
            isLoading = true;
            
            if (ProjectId.HasValue)
            {
                budgets = await BudgetService.GetByProjectIdAsync(ProjectId.Value);
                budgetCommand.ProjectId = ProjectId.Value;
            }
            else
            {
                budgets = await BudgetService.GetAllAsync();
            }
            
            CalculateSummary();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading budgets: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateSummary()
    {
        if (budgets?.Any() == true)
        {
            totalPlanned = budgets.Sum(b => b.PlannedAmount);
            totalActual = budgets.Sum(b => b.ActualAmount);
            totalCommitted = budgets.Sum(b => b.CommittedAmount);
            totalVariance = budgets.Sum(b => b.VarianceAmount);
        }
        else
        {
            totalPlanned = totalActual = totalCommitted = totalVariance = 0;
        }
    }

    private void ShowCreateModal()
    {
        budgetCommand = new CreateBudgetCommand();
        if (ProjectId.HasValue)
        {
            budgetCommand.ProjectId = ProjectId.Value;
        }
        budgetCommand.PeriodStart = DateTime.Today;
        budgetCommand.PeriodEnd = DateTime.Today.AddMonths(1);
        isEditMode = false;
        showModal = true;
    }

    private void EditBudget(BudgetDto budget)
    {
        updateCommand = new UpdateBudgetCommand
        {
            Id = budget.Id,
            PathId = budget.PathId,
            Category = budget.Category,
            Description = budget.Description,
            PlannedAmount = budget.PlannedAmount,
            ActualAmount = budget.ActualAmount,
            CommittedAmount = budget.CommittedAmount,
            Currency = budget.Currency,
            PeriodStart = budget.PeriodStart,
            PeriodEnd = budget.PeriodEnd,
            Notes = budget.Notes
        };
        
        // Copy to budgetCommand for form binding
        budgetCommand = new CreateBudgetCommand
        {
            ProjectId = budget.ProjectId,
            PathId = budget.PathId,
            Category = budget.Category,
            Description = budget.Description,
            PlannedAmount = budget.PlannedAmount,
            Currency = budget.Currency,
            PeriodStart = budget.PeriodStart,
            PeriodEnd = budget.PeriodEnd,
            Notes = budget.Notes
        };
        
        isEditMode = true;
        showModal = true;
    }

    private async Task SaveBudget()
    {
        try
        {
            isSaving = true;
            
            if (isEditMode)
            {
                // Copy values from budgetCommand to updateCommand
                updateCommand.PathId = budgetCommand.PathId;
                updateCommand.Category = budgetCommand.Category;
                updateCommand.Description = budgetCommand.Description;
                updateCommand.PlannedAmount = budgetCommand.PlannedAmount;
                updateCommand.Currency = budgetCommand.Currency;
                updateCommand.PeriodStart = budgetCommand.PeriodStart;
                updateCommand.PeriodEnd = budgetCommand.PeriodEnd;
                updateCommand.Notes = budgetCommand.Notes;
                
                await BudgetService.UpdateAsync(updateCommand);
            }
            else
            {
                await BudgetService.CreateAsync(budgetCommand);
            }
            
            await LoadBudgets();
            HideModal();
            
            await JSRuntime.InvokeVoidAsync("showToast", "success", $"Budget item {(isEditMode ? "updated" : "created")} successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error saving budget item: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ApproveBudget(Guid budgetId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to approve this budget item?");
        if (confirmed)
        {
            try
            {
                // TODO: Get current user ID
                var currentUserId = Guid.NewGuid(); // Placeholder
                await BudgetService.ApproveBudgetAsync(budgetId, currentUserId);
                await LoadBudgets();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Budget item approved successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error approving budget item: {ex.Message}");
            }
        }
    }

    private async Task DeleteBudget(Guid budgetId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this budget item?");
        if (confirmed)
        {
            try
            {
                await BudgetService.DeleteAsync(budgetId);
                await LoadBudgets();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Budget item deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error deleting budget item: {ex.Message}");
            }
        }
    }

    private void HideModal()
    {
        showModal = false;
        budgetCommand = new CreateBudgetCommand();
        updateCommand = new UpdateBudgetCommand();
    }

    private string GetCategoryBadgeClass(BudgetCategory category)
    {
        return category switch
        {
            BudgetCategory.Labor => "bg-primary",
            BudgetCategory.VendorRateCard => "bg-info",
            BudgetCategory.VendorLumpSum => "bg-info",
            BudgetCategory.Purchases => "bg-warning",
            BudgetCategory.Overheads => "bg-secondary",
            BudgetCategory.Contingency => "bg-danger",
            _ => "bg-dark"
        };
    }
}

