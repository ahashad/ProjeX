@page "/paths"
@page "/projects/{ProjectId:guid}/paths"
@using ProjeX.Application.Path
@using ProjeX.Application.Path.Commands
@inject IPathService PathService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Project Paths</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-route me-2"></i>
                        Project Paths (Workstreams)
                        @if (!string.IsNullOrEmpty(ProjectName))
                        {
                            <small class="text-muted">- @ProjectName</small>
                        }
                    </h4>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus me-1"></i>
                        Add Path
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (paths?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Name</th>
                                        <th>Objective</th>
                                        <th>Owner</th>
                                        <th>Allocation %</th>
                                        <th>Planned Cost</th>
                                        <th>Deliverables</th>
                                        <th>Team Slots</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var path in paths)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@path.Name</strong>
                                            </td>
                                            <td>
                                                <span class="text-muted">@(path.Objective.Length > 50 ? path.Objective.Substring(0, 50) + "..." : path.Objective)</span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(path.OwnerName))
                                                {
                                                    <span class="badge bg-info">@path.OwnerName</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Unassigned</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar @GetAllocationProgressClass(path.AllowedAllocationPercentage)" 
                                                         role="progressbar" 
                                                         style="width: @(path.AllowedAllocationPercentage)%"
                                                         aria-valuenow="@path.AllowedAllocationPercentage" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100">
                                                        @path.AllowedAllocationPercentage.ToString("F1")%
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="fw-bold text-success">$@path.PlannedCost.ToString("N2")</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@path.DeliverablesCount</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@path.PlannedTeamSlotsCount</span>
                                            </td>
                                            <td>
                                                @if (path.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPath(path)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ViewPathDetails(path.Id)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePath(path.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Summary Card -->
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Path Summary</h6>
                                        <div class="row">
                                            <div class="col-6">
                                                <small class="text-muted">Total Allocation:</small>
                                                <div class="fw-bold @(totalAllocation > 100 ? "text-danger" : "text-success")">
                                                    @totalAllocation.ToString("F1")%
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-muted">Total Planned Cost:</small>
                                                <div class="fw-bold text-primary">
                                                    $@totalPlannedCost.ToString("N2")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-route fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No paths found</h5>
                            <p class="text-muted">Create your first project path to get started.</p>
                            <button class="btn btn-primary" @onclick="ShowCreateModal">
                                <i class="fas fa-plus me-1"></i>
                                Add First Path
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show" : "")" style="display: @(showModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @(isEditMode ? "Edit Path" : "Create New Path")
                </h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="pathCommand" OnValidSubmit="SavePath">
                    <DataAnnotationsValidator />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Name *</label>
                                <InputText @bind-Value="pathCommand.Name" class="form-control" placeholder="Enter path name" />
                                <ValidationMessage For="@(() => pathCommand.Name)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Allowed Allocation % *</label>
                                <InputNumber @bind-Value="pathCommand.AllowedAllocationPercentage" class="form-control" min="0" max="100" step="0.1" />
                                <ValidationMessage For="@(() => pathCommand.AllowedAllocationPercentage)" />
                                <small class="form-text text-muted">Maximum capacity for this path (0-100%)</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Objective</label>
                        <InputTextArea @bind-Value="pathCommand.Objective" class="form-control" rows="3" placeholder="Describe the path objective" />
                        <ValidationMessage For="@(() => pathCommand.Objective)" />
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Planned Cost *</label>
                                <InputNumber @bind-Value="pathCommand.PlannedCost" class="form-control" min="0" step="0.01" />
                                <ValidationMessage For="@(() => pathCommand.PlannedCost)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Owner</label>
                                <select @bind="pathCommand.OwnerId" class="form-select">
                                    <option value="">Select Owner</option>
                                    <!-- TODO: Load employees from service -->
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Notes</label>
                        <InputTextArea @bind-Value="pathCommand.Notes" class="form-control" rows="2" placeholder="Additional notes" />
                        <ValidationMessage For="@(() => pathCommand.Notes)" />
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            @(isEditMode ? "Update" : "Create") Path
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public Guid? ProjectId { get; set; }
    
    private IEnumerable<PathDto>? paths;
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string ProjectName = string.Empty;
    private decimal totalAllocation = 0;
    private decimal totalPlannedCost = 0;
    
    private CreatePathCommand pathCommand = new();
    private UpdatePathCommand updateCommand = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPaths();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue)
        {
            await LoadPaths();
        }
    }

    private async Task LoadPaths()
    {
        try
        {
            isLoading = true;
            
            if (ProjectId.HasValue)
            {
                paths = await PathService.GetByProjectIdAsync(ProjectId.Value);
                pathCommand.ProjectId = ProjectId.Value;
            }
            else
            {
                paths = await PathService.GetAllAsync();
            }
            
            CalculateSummary();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading paths: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateSummary()
    {
        if (paths?.Any() == true)
        {
            totalAllocation = paths.Sum(p => p.AllowedAllocationPercentage);
            totalPlannedCost = paths.Sum(p => p.PlannedCost);
        }
        else
        {
            totalAllocation = 0;
            totalPlannedCost = 0;
        }
    }

    private void ShowCreateModal()
    {
        pathCommand = new CreatePathCommand();
        if (ProjectId.HasValue)
        {
            pathCommand.ProjectId = ProjectId.Value;
        }
        isEditMode = false;
        showModal = true;
    }

    private void EditPath(PathDto path)
    {
        updateCommand = new UpdatePathCommand
        {
            Id = path.Id,
            Name = path.Name,
            Objective = path.Objective,
            AllowedAllocationPercentage = path.AllowedAllocationPercentage,
            PlannedCost = path.PlannedCost,
            OwnerId = path.OwnerId,
            Notes = path.Notes,
            IsActive = path.IsActive
        };
        isEditMode = true;
        showModal = true;
    }

    private async Task SavePath()
    {
        try
        {
            isSaving = true;
            
            if (isEditMode)
            {
                await PathService.UpdateAsync(updateCommand);
            }
            else
            {
                await PathService.CreateAsync(pathCommand);
            }
            
            await LoadPaths();
            HideModal();
            
            await JSRuntime.InvokeVoidAsync("showToast", "success", $"Path {(isEditMode ? "updated" : "created")} successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error saving path: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeletePath(Guid pathId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this path?");
        if (confirmed)
        {
            try
            {
                await PathService.DeleteAsync(pathId);
                await LoadPaths();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Path deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error deleting path: {ex.Message}");
            }
        }
    }

    private void ViewPathDetails(Guid pathId)
    {
        Navigation.NavigateTo($"/paths/{pathId}");
    }

    private void HideModal()
    {
        showModal = false;
        pathCommand = new CreatePathCommand();
        updateCommand = new UpdatePathCommand();
    }

    private string GetAllocationProgressClass(decimal allocation)
    {
        return allocation switch
        {
            <= 50 => "bg-success",
            <= 75 => "bg-warning",
            <= 100 => "bg-info",
            _ => "bg-danger"
        };
    }
}

