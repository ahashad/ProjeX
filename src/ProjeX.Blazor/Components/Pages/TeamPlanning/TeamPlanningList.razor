@page "/team-planning"
@page "/team-planning/{ProjectId:guid}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Microsoft.AspNetCore.Authorization
@using ProjeX.Application.PlannedTeamSlot
@using ProjeX.Application.PlannedTeamSlot.Commands
@using ProjeX.Application.Project
@using ProjeX.Application.RolesCatalog
@using ProjeX.Application.Employee
@using ProjeX.Application.ActualAssignment
@using ProjeX.Application.ActualAssignment.Commands
@using ProjeX.Domain.Enums
@using System.Threading
@using ProjeX.Domain.Interfaces
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Data
@using Microsoft.AspNetCore.Components

@attribute [Authorize]
@implements IAsyncDisposable
@inject IPlannedTeamSlotService PlannedTeamSlotService
@inject IProjectService ProjectService
@inject IRolesCatalogService RolesCatalogService
@inject IEmployeeService EmployeeService
@inject IAssignmentService AssignmentService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager Navigation

<PageTitle>Team Planning - ProjeX</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1>Team Planning</h1>
        @if (EffectiveProjectId.HasValue && currentProject != null)
        {
            <div class="d-flex align-items-center">
                <h5 class="text-muted mb-0 me-3">Project: @currentProject.ProjectName</h5>
                <span class="badge bg-info">Project Locked</span>
            </div>
        }
    </div>
    <AuthorizeView Policy="ManagerOrAdmin">
        <button class="btn btn-primary" @onclick="ShowCreateModal">
            <i class="fas fa-plus me-2"></i>New Planning Slot
        </button>
    </AuthorizeView>
</div>


@if (!EffectiveProjectId.HasValue)
{
    <!-- Project Filter -->
    <div class="row mb-4">
        <div class="col-md-4">
            <label class="form-label">@(EffectiveProjectId.HasValue ? "Selected Project" : "Filter by Project")</label>
            <SfDropDownList TValue="Guid?" TItem="ProjectDto" DataSource="@projects"
                            @bind-value="selectedProjectId" Placeholder="Select a project..."
                            AllowClear="@(!EffectiveProjectId.HasValue)" PopupHeight="200px"
                            Enabled="@(!EffectiveProjectId.HasValue)">
                <DropDownListFieldSettings Value="Id" Text="ProjectName"></DropDownListFieldSettings>
                <DropDownListEvents TValue="Guid?" TItem="ProjectDto" ValueChange="OnProjectChanged"></DropDownListEvents>
            </SfDropDownList>
        </div>
    </div>
}
else
{
    // Hidden input to hold the EffectiveProjectId
    <input type="hidden" value="@EffectiveProjectId" />
}


@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (plannedSlots != null)
{
    <!-- KPI Cards (Auto-Refresh) -->
    @if (projectKpis != null)
    {
        <div class="row g-3 mb-4">
            <!-- Total Planned Cost -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="card border-primary h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h6 class="text-muted mb-1">Total Planned Cost</h6>
                                <h4 class="mb-0">@projectKpis.TotalPlannedCost.ToString("C")</h4>
                            </div>
                            <i class="fas fa-chart-line fa-2x text-primary opacity-25"></i>
                        </div>
                        <small class="text-muted">Budgeted team cost</small>
                    </div>
                </div>
            </div>

            <!-- Total Actual Cost -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="card border-warning h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h6 class="text-muted mb-1">Total Actual Cost</h6>
                                <h4 class="mb-0">@projectKpis.TotalActualCost.ToString("C")</h4>
                            </div>
                            <i class="fas fa-money-bill-wave fa-2x text-warning opacity-25"></i>
                        </div>
                        <small class="text-muted">Actual spent (snapshot)</small>
                    </div>
                </div>
            </div>

            <!-- Total Variance -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="card @(projectKpis.TotalVariance > 0 ? "border-danger" : projectKpis.TotalVariance < 0 ? "border-success" : "border-secondary") h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h6 class="text-muted mb-1">Total Variance</h6>
                                <h4 class="mb-0 @(projectKpis.TotalVariance > 0 ? "text-danger" : projectKpis.TotalVariance < 0 ? "text-success" : "text-muted")">
                                    @if (projectKpis.TotalVariance > 0)
                                    {
                                        <i class="fas fa-arrow-up me-1"></i>
                                    }
                                    else if (projectKpis.TotalVariance < 0)
                                    {
                                        <i class="fas fa-arrow-down me-1"></i>
                                    }
                                    @projectKpis.TotalVariance.ToString("C")
                                </h4>
                            </div>
                            <i class="fas fa-exchange-alt fa-2x @(projectKpis.TotalVariance > 0 ? "text-danger" : projectKpis.TotalVariance < 0 ? "text-success" : "text-secondary") opacity-25"></i>
                        </div>
                        <small class="text-muted">Actual - Planned</small>
                    </div>
                </div>
            </div>

            <!-- Utilization -->
            <div class="col-12 col-sm-6 col-md-3">
                <div class="card border-info h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h6 class="text-muted mb-1">Utilization</h6>
                                <h4 class="mb-0">@projectKpis.AverageUtilizationPercent.ToString("F1")%</h4>
                            </div>
                            <i class="fas fa-chart-pie fa-2x text-info opacity-25"></i>
                        </div>
                        <small class="text-muted">Average slot utilization</small>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="card mb-4">
        <div class="card-body">
            <SfGrid @ref="plannedSlotsGrid" DataSource="@plannedSlots" AllowPaging="true" AllowSorting="true"
                    AllowFiltering="true" AllowSelection="true" PageSize="15"
                    Toolbar="@(new List<string>() { "Search" })">
                <GridPageSettings PageSize="15"></GridPageSettings>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                <GridEvents TValue="PlannedTeamSlotDto" RowSelected="OnSlotSelected"></GridEvents>
                <GridColumns>
                    @if (!EffectiveProjectId.HasValue)
                    {
                        <GridColumn Field=@nameof(PlannedTeamSlotDto.ProjectName) HeaderText="Project" Width="180"></GridColumn>
                    }
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.RoleName) HeaderText="Role" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.AllocationPercent) HeaderText="Allocation %" Width="120" Format="N1"></GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.PeriodMonths) HeaderText="Period (Months)" Width="120" Format="N1"></GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.UtilizationPercent) HeaderText="Utilization %" Width="130" Format="N1">
                        <Template>
                            @{
                                var slot = (context as PlannedTeamSlotDto);
                            }
                            <span>@slot?.UtilizationPercent.ToString("F1")%</span>
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.PlannedCost) HeaderText="Planned Cost" Width="130" Format="C"></GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.ActualCost) HeaderText="Actual Cost" Width="130" Format="C"></GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.Variance) HeaderText="Variance" Width="130" Format="C">
                        <Template>
                            @{
                                var slot = (context as PlannedTeamSlotDto);
                                var varianceClass = slot?.Variance > 0 ? "text-danger" : (slot?.Variance < 0 ? "text-success" : "text-muted");
                                var varianceIcon = slot?.Variance > 0 ? "fa-arrow-up" : (slot?.Variance < 0 ? "fa-arrow-down" : "fa-minus");
                            }
                            <span class="@varianceClass">
                                <i class="fas @varianceIcon me-1"></i>
                                @slot?.Variance.ToString("C")
                            </span>
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(PlannedTeamSlotDto.Status) HeaderText="Status" Width="100">
                        <Template>
                            @{
                                var slot = (context as PlannedTeamSlotDto);
                                var badgeClass = GetStatusBadgeClass(slot?.Status ?? PlannedTeamStatus.Planned);
                            }
                            <span class="badge @badgeClass">@slot?.Status</span>
                        </Template>
                    </GridColumn>
                    <GridColumn HeaderText="Actions" Width="300" AllowFiltering="false" AllowSorting="false">
                        <Template>
                            @{
                                var slot = (context as PlannedTeamSlotDto);
                            }
                            <AuthorizeView Policy="ManagerOrAdmin" Context="gridAuth">
                                <Authorized>
                                    <div class="btn-group btn-group-sm">
@*                                         @if (slot?.Status == PlannedTeamStatus.Planned)
                                        {
                                            @if (slot.IsAssigned)
                                            {
                                                <button class="btn btn-outline-success" title="Approve Assignment" @onclick="() => ShowApprovalModal(slot!)">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" title="Reject Assignment" @onclick="() => ShowRejectModal(slot!)">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            }
                                            else
                                            { *@
                                                <button class="btn btn-outline-success" title="Assign Employee" @onclick="async () => await ShowAssignmentModal(slot!)">
                                                    <i class="fas fa-user-plus"></i>
                                                </button>
@*                                             }
                                        }
                                        @if (slot?.Status == PlannedTeamStatus.Active && slot.IsAssigned)
                                        {
                                            <button class="btn btn-outline-warning" title="Unassign Employee" @onclick="() => ShowUnassignmentModal(slot!)">
                                                <i class="fas fa-user-minus"></i>
                                            </button>
                                        } *@
                                        <button class="btn btn-outline-warning" title="Edit" @onclick="() => ShowEditModal(slot!)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" title="Delete" @onclick="() => ShowDeleteConfirmation(slot!)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </Authorized>
                            </AuthorizeView>
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>

    <!-- Grid 2: Assignments for Selected Slot -->
    @if (selectedSlot != null && showAssignmentsGrid)
    {
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        Assignments for @selectedSlot.RoleName (@selectedSlot.ProjectName)
                    </h5>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => { selectedSlot = null; slotAssignments = null; }">
                        <i class="fas fa-times"></i> Clear Selection
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (isLoadingAssignments)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading assignments...</span>
                        </div>
                        <p class="mt-2 text-muted">Loading assignments...</p>
                    </div>
                }
                else if (slotAssignments == null || !slotAssignments.Any())
                {
                    <div class="text-center py-5">
                        <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No assignments found for this slot</h5>
                        <p class="text-muted">Create an assignment to see it here.</p>
                    </div>
                }
                else
                {
                    <SfGrid DataSource="@slotAssignments" AllowPaging="true" AllowSorting="true"
                            AllowFiltering="true" PageSize="15"
                            Toolbar="@(new List<string>() { "Search", "ExcelExport", "PdfExport" })">
                        <GridPageSettings PageSize="15"></GridPageSettings>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar"></GridFilterSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(ActualAssignmentDto.EmployeeName) HeaderText="Employee" Width="160"></GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.RoleName) HeaderText="Position" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.Status) HeaderText="Status" Width="100">
                                <Template>
                                    @{
                                        var assignment = (context as ActualAssignmentDto);
                                        var badgeClass = assignment?.Status == AssignmentStatus.Active ? "bg-success" : "bg-primary";
                                    }
                                    <span class="badge @badgeClass">@assignment?.Status</span>
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.StartDate) HeaderText="Start Date" Width="110" Format="d"></GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.EndDate) HeaderText="End Date" Width="110" Format="d">
                                <Template>
                                    @{
                                        var assignment = (context as ActualAssignmentDto);
                                    }
                                    <span>@(assignment?.EndDate?.ToString("yyyy-MM-dd") ?? "Ongoing")</span>
                                </Template>
                            </GridColumn>

                            <GridColumn Field=@nameof(ActualAssignmentDto.UtilizationPercent) HeaderText="Utilization %" Width="120" Format="N1">
                                <Template>
                                    @{
                                        var assignment = (context as ActualAssignmentDto);
                                    }
                                    <span>@assignment?.UtilizationPercent.ToString("F1")%</span>
                                </Template>
                            </GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.PlannedCostShare) HeaderText="Planned Cost" Width="120" Format="C"></GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.ActualCost) HeaderText="Actual Cost" Width="120" Format="C"></GridColumn>
                            <GridColumn Field=@nameof(ActualAssignmentDto.CostVariance) HeaderText="Cost Variance" Width="130">
                                <Template>
                                    @{
                                        var assignment = (context as ActualAssignmentDto);
                                        var varianceClass = assignment?.CostVariance <= 0 ? "text-success" : "text-danger";
                                        var varianceIcon = assignment?.CostVariance <= 0 ? "fa-arrow-down" : "fa-arrow-up";
                                    }
                                    <span class="@varianceClass">
                                        <i class="fas @varianceIcon me-1"></i>
                                        @assignment?.CostVariance.ToString("C")
                                    </span>
                                </Template>
                            </GridColumn>
                            <GridColumn HeaderText="Timeline" Width="200" AllowFiltering="false" AllowSorting="false">
                                <Template>
                                    @{
                                        var assignment = (context as ActualAssignmentDto);
                                        if (assignment != null && selectedSlot != null)
                                        {
                                            var slotStart = selectedSlot.ProjectId != Guid.Empty ? currentProject?.StartDate ?? assignment.ProjectStartDate : assignment.ProjectStartDate;
                                            var slotEnd = selectedSlot.ProjectId != Guid.Empty ? currentProject?.EndDate ?? assignment.ProjectEndDate : assignment.ProjectEndDate;
                                            var totalDays = (slotEnd - slotStart).Days;
                                            var assignmentStartOffset = ((assignment.TimelineStart - slotStart).Days / (double)totalDays) * 100;
                                            var assignmentDuration = ((assignment.TimelineEnd - assignment.TimelineStart).Days / (double)totalDays) * 100;
                                            var widthPercent = Math.Max(assignmentDuration, 2);
                                            var leftPercent = Math.Max(assignmentStartOffset, 0);
                                            <div class="timeline-container" style="position: relative; height: 20px; background-color: #e9ecef; border-radius: 4px;">
                                                <div class="timeline-bar" style="position: absolute; left: @(leftPercent.ToString("F2"))%; width: @(widthPercent.ToString("F2"))%; height: 100%; background-color: #0d6efd; border-radius: 4px;" title="@assignment.StartDate.ToString("d") - @(assignment.EndDate?.ToString("d") ?? "Ongoing")"></div>
                                            </div>
                                        }
                                    }
                                </Template>
                            </GridColumn>
                            <GridColumn HeaderText="Actions" Width="250" AllowFiltering="false" AllowSorting="false">
                                <Template>
                                    @{
                                        var assignment = (context as ActualAssignmentDto);
                                    }
                                    <AuthorizeView Policy="ManagerOrAdmin" Context="gridAuth2">
                                        <Authorized>
                                            <div class="btn-group btn-group-sm">
                                                <!-- Approve/Decline buttons for Planned assignments -->
                                                @if (assignment?.Status == AssignmentStatus.Planned)
                                                {
                                                    <button class="btn btn-outline-success" title="Approve" @onclick="() => ShowApproveAssignmentConfirmation(assignment!)">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" title="Decline" @onclick="() => ShowDeclineAssignmentConfirmation(assignment!)">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                }

                                                <!-- Standard actions -->
                                                <button class="btn btn-outline-info" title="View Details" @onclick="() => ShowDetailsModal(assignment!)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-primary" title="Edit" @onclick="() => ShowEditAssignmentModal(assignment!)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" title="Delete" @onclick="() => ShowDeleteAssignmentConfirmation(assignment!)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </div>
        </div>
    }
}

<!-- Create/Edit Planning Slot Modal -->
<SfDialog @bind-Visible="@showModal" Width="700px" Height="600px" IsModal="true">
    <DialogTemplates>
        <Header>@(isEdit ? "Edit" : "Create") Planning Slot</Header>
        <Content>
            <EditForm Model="@slotRequest" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Project *</label>
                            <SfDropDownList TValue="Guid" TItem="ProjectDto" DataSource="@projects"
                                            @bind-value="slotRequest.ProjectId" Placeholder="Select project..."
                                            Enabled="@(!EffectiveProjectId.HasValue)">
                                <DropDownListFieldSettings Value="Id" Text="ProjectName"></DropDownListFieldSettings>
                            </SfDropDownList>
                            @if (EffectiveProjectId.HasValue)
                            {
                                <small class="form-text text-muted">Project is locked when accessed with a specific project ID.</small>
                            }
                            <ValidationMessage For="@(() => slotRequest.ProjectId)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Role *</label>
                            <SfDropDownList TValue="Guid" TItem="RolesCatalogDto" DataSource="@roles"
                                            @bind-value="slotRequest.RoleId" Placeholder="Select role...">
                                <DropDownListFieldSettings Value="Id" Text="RoleName"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="Guid" TItem="RolesCatalogDto" ValueChange="OnRoleChanged"></DropDownListEvents>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => slotRequest.RoleId)" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Period (Months)</label>
                            <InputNumber @bind-value="slotRequest.PeriodMonths" class="form-control" min="0.1" step="0.1" />
                            <ValidationMessage For="@(() => slotRequest.PeriodMonths)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Allocation %</label>
                            <InputNumber @bind-value="slotRequest.AllocationPercent" class="form-control" min="0" max="100" step="1" />
                            <ValidationMessage For="@(() => slotRequest.AllocationPercent)" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Planned Salary</label>
                            <InputNumber @bind-value="slotRequest.PlannedSalary" class="form-control" min="0" step="100" />
                            <ValidationMessage For="@(() => slotRequest.PlannedSalary)" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Planned Incentive</label>
                            <InputNumber @bind-value="slotRequest.PlannedIncentive" class="form-control" min="0" step="100" />
                            <ValidationMessage For="@(() => slotRequest.PlannedIncentive)" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Commission %</label>
                            <InputNumber @bind-value="slotRequest.PlannedCommissionPercent" class="form-control" min="0" max="100" step="0.1" />
                            <ValidationMessage For="@(() => slotRequest.PlannedCommissionPercent)" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Planned Tickets</label>
                            <InputNumber @bind-value="slotRequest.PlannedTickets" class="form-control" min="0" step="100" />
                            <ValidationMessage For="@(() => slotRequest.PlannedTickets)" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Planned Hoteling</label>
                            <InputNumber @bind-value="slotRequest.PlannedHoteling" class="form-control" min="0" step="100" />
                            <ValidationMessage For="@(() => slotRequest.PlannedHoteling)" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Planned Others</label>
                            <InputNumber @bind-value="slotRequest.PlannedOthers" class="form-control" min="0" step="100" />
                            <ValidationMessage For="@(() => slotRequest.PlannedOthers)" />
                        </div>
                    </div>
                </div>

                @if (slotRequest.RoleId != Guid.Empty && !isEdit)
                {
                    <div class="mb-3">
                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ResetToRoleDefaults">
                            <i class="fas fa-undo me-1"></i>Reset to Role Defaults
                        </button>
                    </div>
                }

                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary me-2" @onclick="HideModal">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @(isEdit ? "Update" : "Create")
                    </button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

<!-- Assignment Modal -->
<SfDialog @bind-Visible="@showAssignmentModal" Width="800px" Height="700px" IsModal="true">
    <DialogTemplates>
        <Header>Assign Employee to @selectedSlot?.RoleName</Header>
        <Content>
            <EditForm Model="@assignmentRequest" OnValidSubmit="@HandleAssignmentSubmit">
                <DataAnnotationsValidator />

                <!-- Planned Slot Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-info-circle me-2"></i>Planned Slot Details</h6>
                    </div>
                    <div class="card-body">
                        @if (selectedSlot != null)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Role:</strong> @selectedSlot.RoleName</p>
                                    <p><strong>Project:</strong> @selectedSlot.ProjectName</p>
                                    <p><strong>Planned Allocation:</strong> @selectedSlot.AllocationPercent.ToString("F1")%</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Period:</strong> @selectedSlot.PeriodMonths.ToString("F1") months</p>
                                    <p><strong>Planned Salary:</strong> @selectedSlot.PlannedSalary.ToString("C")</p>
                                    <p><strong>Budget Cost:</strong> @selectedSlot.ComputedBudgetCost.ToString("C")</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Employee *</label>



                            <SfDropDownList TValue="Guid" TItem="EmployeeDto" DataSource="@availableEmployees"
                                            @bind-value="assignmentRequest.EmployeeId"
                                            Placeholder="Select employee..."
                                            AllowFiltering="true"
                                            FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                            PopupHeight="300px" Width="100%">
                                <DropDownListFieldSettings Value="Id" Text="FullName"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="Guid" TItem="EmployeeDto" ValueChange="OnAssignmentEmployeeChanged"></DropDownListEvents>

                                <DropDownListTemplates TItem="EmployeeDto">
                                    <!-- Template for items in the dropdown list -->
                                    <ItemTemplate Context="employee">
                                        @if (employee != null)
                                        {
                                            <div class="d-flex align-items-center py-2">
                                                <div class="flex-grow-1">
                                                    <strong>@employee.FullName</strong>
                                                    <div class="text-muted small">
                                                        <i class="fas fa-user-tag me-1"></i>@employee.RoleName
                                                    </div>
                                                </div>
                                                <div class="text-end">
                                                    <span class="badge bg-success">
                                                        @employee.Salary.ToString("C0")
                                                    </span>
                                                </div>
                                            </div>
                                        }
                                    </ItemTemplate>

                                    <!-- Template for the selected value -->
                                    <ValueTemplate Context="selectedEmp">
                                        @if (selectedEmp != null)
                                        {
                                            <div class="d-flex align-items-center">
                                                <strong class="me-2">@selectedEmp.FullName</strong>
                                                <small class="text-muted">(@selectedEmp.RoleName)</small>
                                                <span class="ms-auto text-success fw-bold">@selectedEmp.Salary.ToString("C0")</span>
                                            </div>
                                        }
                                    </ValueTemplate>
                                </DropDownListTemplates>
                            </SfDropDownList>



                            <ValidationMessage For="@(() => assignmentRequest.EmployeeId)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Allocation % *</label>
                            <InputNumber @bind-value="assignmentRequest.AllocationPercent"
                                         @bind-value:after="TriggerRealtimeValidation"
                                         class="form-control" min="0" max="100" step="1" />
                            <ValidationMessage For="@(() => assignmentRequest.AllocationPercent)" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Start Date *</label>
                            <InputDate @bind-value="assignmentRequest.StartDate"
                                       @bind-value:after="TriggerRealtimeValidation"
                                       class="form-control" />
                            <ValidationMessage For="@(() => assignmentRequest.StartDate)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">End Date</label>
                            <InputDate @bind-value="assignmentRequest.EndDate"
                                       @bind-value:after="TriggerRealtimeValidation"
                                       class="form-control" />
                            <small class="form-text text-muted">Leave empty to use project end date</small>
                            <ValidationMessage For="@(() => assignmentRequest.EndDate)" />
                        </div>
                    </div>
                </div>

                <!-- Realtime Validation Summary -->
                @if (isValidating)
                {
                    <div class="alert alert-info d-flex align-items-center mb-3">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        <span>Validating assignment...</span>
                    </div>
                }
                else if (currentValidation != null)
                {
                    <!-- Validation Summary Card -->
                    <div class="card mb-3 border-@GetValidationBorderClass(currentValidation.Severity)">
                        <div class="card-header bg-@GetValidationBgClass(currentValidation.Severity) text-white">
                            <h6 class="mb-0">
                                <i class="fas @GetValidationIcon(currentValidation.Severity) me-2"></i>
                                Validation Status: @GetValidationStatusText(currentValidation.Severity)
                                @if (currentValidation.RemainingCapacityPercent >= 0)
                                {
                                    <span class="badge bg-light text-dark ms-2">
                                        Available: @currentValidation.RemainingCapacityPercent.ToString("F1")%
                                    </span>
                                }
                            </h6>
                        </div>
                        <div class="card-body">
                            @if (currentValidation.BlockingErrors.Any())
                            {
                                <div class="alert alert-danger mb-2">
                                    <strong><i class="fas fa-exclamation-circle me-1"></i>Blocking Errors:</strong>
                                    <ul class="mb-0 mt-1">
                                        @foreach (var error in currentValidation.BlockingErrors)
                                        {
                                            <li>@error</li>
                                        }
                                    </ul>
                                </div>
                            }

                            @if (currentValidation.Warnings.Any())
                            {
                                <div class="alert alert-warning mb-2">
                                    <strong><i class="fas fa-exclamation-triangle me-1"></i>Warnings:</strong>
                                    <ul class="mb-0 mt-1">
                                        @foreach (var warning in currentValidation.Warnings)
                                        {
                                            <li>@warning</li>
                                        }
                                    </ul>
                                </div>
                            }

                            @if (currentValidation.Messages.Any())
                            {
                                <div class="alert alert-info mb-2">
                                    <strong><i class="fas fa-info-circle me-1"></i>Information:</strong>
                                    <ul class="mb-0 mt-1">
                                        @foreach (var message in currentValidation.Messages)
                                        {
                                            <li>@message</li>
                                        }
                                    </ul>
                                </div>
                            }

                            @if (currentValidation.IsValid)
                            {
                                <div class="alert alert-success mb-0">
                                    <i class="fas fa-check-circle me-1"></i>
                                    <strong>Ready to save!</strong> No conflicts detected.
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Conflicts Panel -->
                    @if (currentValidation.HasConflicts && currentValidation.ConflictingAssignments.Any())
                    {
                        <div class="card mb-3 border-warning">
                            <div class="card-header bg-warning text-dark">
                                <h6 class="mb-0">
                                    <i class="fas fa-calendar-times me-2"></i>
                                    Conflicting Assignments (@currentValidation.ConflictCount)
                                </h6>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover mb-0">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Project</th>
                                                <th>Role</th>
                                                <th>Start</th>
                                                <th>End</th>
                                                <th>Allocation %</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var conflict in currentValidation.ConflictingAssignments)
                                            {
                                                <tr>
                                                    <td><small>@conflict.ProjectName</small></td>
                                                    <td><small>@conflict.RoleName</small></td>
                                                    <td><small>@conflict.StartDate.ToString("yyyy-MM-dd")</small></td>
                                                    <td><small>@(conflict.EndDate?.ToString("yyyy-MM-dd") ?? "Ongoing")</small></td>
                                                    <td><small>@conflict.AllocationPercent.ToString("F1")%</small></td>
                                                    <td><span class="badge bg-secondary">@conflict.Status</span></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Suggested Windows Panel -->
                    @if (currentValidation.SuggestedWindows.Any())
                    {
                        <div class="card mb-3 border-success">
                            <div class="card-header bg-success text-white">
                                <h6 class="mb-0">
                                    <i class="fas fa-lightbulb me-2"></i>
                                    Suggested Available Windows
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @foreach (var window in currentValidation.SuggestedWindows)
                                    {
                                        <div class="col-md-12 mb-2">
                                            <div class="card border-success">
                                                <div class="card-body p-3">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <div>
                                                            <h6 class="mb-1">
                                                                <span class="badge bg-primary me-2">@window.Priority</span>
                                                                @window.Reason
                                                            </h6>
                                                            <p class="mb-1">
                                                                <strong>@window.StartDate.ToString("yyyy-MM-dd")</strong> to
                                                                <strong>@window.EndDate.ToString("yyyy-MM-dd")</strong>
                                                                <span class="text-muted ms-2">(@window.DurationDays days)</span>
                                                            </p>
                                                            <small class="text-muted">
                                                                Available: @window.MaxAllocationAvailable.ToString("F1")%
                                                            </small>
                                                        </div>
                                                        <button type="button" class="btn btn-sm btn-outline-success"
                                                                @onclick="() => ApplySuggestedWindow(window)">
                                                            <i class="fas fa-check me-1"></i>Use This Window
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }

                <div class="mb-3">
                    <label class="form-label">Notes</label>
                    <InputTextArea @bind-value="assignmentRequest.Notes" class="form-control" rows="3" placeholder="Optional notes about this assignment..." />
                    <ValidationMessage For="@(() => assignmentRequest.Notes)" />
                </div>

                @if (selectedEmployee != null)
                {
                    <div class="card mb-3 border-info">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0">
                                <i class="fas fa-camera me-2"></i>Salary Snapshot for This Assignment
                                <small class="d-block mt-1" style="font-size: 0.85em;">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Edit to override; values are saved as a point-in-time snapshot and won't update employee master data.
                                </small>
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Snapshot Salary</label>
                                        <InputNumber @bind-value="assignmentRequest.SnapshotSalary" class="form-control" step="0.01" placeholder="@selectedEmployee.Salary.ToString("F2")" />
                                        <small class="form-text text-muted">Default: @selectedEmployee.Salary.ToString("C")</small>
                                        <ValidationMessage For="@(() => assignmentRequest.SnapshotSalary)" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Snapshot Monthly Incentive</label>
                                        <InputNumber @bind-value="assignmentRequest.SnapshotMonthlyIncentive" class="form-control" step="0.01" placeholder="@selectedEmployee.MonthlyIncentive.ToString("F2")" />
                                        <small class="form-text text-muted">Default: @selectedEmployee.MonthlyIncentive.ToString("C")</small>
                                        <ValidationMessage For="@(() => assignmentRequest.SnapshotMonthlyIncentive)" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Snapshot Commission %</label>
                                        <InputNumber @bind-value="assignmentRequest.SnapshotCommissionPercent" class="form-control" step="0.01" min="0" max="100" placeholder="@selectedEmployee.CommissionPercent.ToString("F2")" />
                                        <small class="form-text text-muted">Default: @selectedEmployee.CommissionPercent.ToString("F1")%</small>
                                        <ValidationMessage For="@(() => assignmentRequest.SnapshotCommissionPercent)" />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Snapshot Tickets</label>
                                        <InputNumber @bind-value="assignmentRequest.SnapshotTickets" class="form-control" step="0.01" placeholder="@(selectedSlot?.PlannedTickets.ToString("F2") ?? "0.00")" />
                                        <small class="form-text text-muted">Default: @(selectedSlot?.PlannedTickets.ToString("C") ?? "0")</small>
                                        <ValidationMessage For="@(() => assignmentRequest.SnapshotTickets)" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Snapshot Hoteling</label>
                                        <InputNumber @bind-value="assignmentRequest.SnapshotHoteling" class="form-control" step="0.01" placeholder="@(selectedSlot?.PlannedHoteling.ToString("F2") ?? "0.00")" />
                                        <small class="form-text text-muted">Default: @(selectedSlot?.PlannedHoteling.ToString("C") ?? "0")</small>
                                        <ValidationMessage For="@(() => assignmentRequest.SnapshotHoteling)" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Snapshot Others</label>
                                        <InputNumber @bind-value="assignmentRequest.SnapshotOthers" class="form-control" step="0.01" placeholder="@(selectedSlot?.PlannedOthers.ToString("F2") ?? "0.00")" />
                                        <small class="form-text text-muted">Default: @(selectedSlot?.PlannedOthers.ToString("C") ?? "0")</small>
                                        <ValidationMessage For="@(() => assignmentRequest.SnapshotOthers)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-calculator me-2"></i>Cost Analysis (Using Effective Values)</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    @{
                                        var effectiveSalary = assignmentRequest.SnapshotSalary ?? selectedEmployee.Salary;
                                        var effectiveIncentive = assignmentRequest.SnapshotMonthlyIncentive ?? selectedEmployee.MonthlyIncentive;
                                        var effectiveCommissionPercent = assignmentRequest.SnapshotCommissionPercent ?? selectedEmployee.CommissionPercent;
                                        var empCommissionValue = (effectiveCommissionPercent / 100m) * (currentProject?.ProjectPrice ?? 0);
                                    }
                                    <h6 class="text-muted">Effective Cost (Snapshot or Employee)</h6>
                                    <p><strong>Salary:</strong> @effectiveSalary.ToString("C")</p>
                                    <p><strong>Monthly Incentive:</strong> @effectiveIncentive.ToString("C")</p>
                                    <p><strong>Commission:</strong> @empCommissionValue.ToString("C") (@effectiveCommissionPercent.ToString("F1")%)</p>
                                    <hr>
                                    <p><strong>Total Monthly Cost:</strong> @(effectiveSalary + effectiveIncentive + empCommissionValue).ToString("C")</p>
                                </div>
                                <div class="col-md-6">
                                    <h6 class="text-muted">Cost Variance vs Planned</h6>
                                    @{
                                        var plannedCommissionValue = (selectedSlot?.PlannedCommissionPercent / 100m ?? 0) * (currentProject?.ProjectPrice ?? 0);
                                        var salaryVariance = effectiveSalary - (selectedSlot?.PlannedSalary ?? 0);
                                        var incentiveVariance = effectiveIncentive - (selectedSlot?.PlannedIncentive ?? 0);
                                        var commissionVariance = empCommissionValue - plannedCommissionValue;
                                        var totalVariance = salaryVariance + incentiveVariance + commissionVariance;
                                    }
                                    <p><strong>Salary Variance:</strong> <span class="@(salaryVariance >= 0 ? "text-warning" : "text-success")">@salaryVariance.ToString("C")</span></p>
                                    <p><strong>Incentive Variance:</strong> <span class="@(incentiveVariance >= 0 ? "text-warning" : "text-success")">@incentiveVariance.ToString("C")</span></p>
                                    <p><strong>Commission Variance:</strong> <span class="@(commissionVariance >= 0 ? "text-warning" : "text-success")">@commissionVariance.ToString("C")</span></p>
                                    <hr>
                                    <p><strong>Total Variance:</strong> <span class="@(totalVariance >= 0 ? "text-warning" : "text-success")">@totalVariance.ToString("C")</span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (employeeCurrentAllocation > 0)
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        Employee current allocation: @employeeCurrentAllocation.ToString("F1")%
                        @if (employeeCurrentAllocation + assignmentRequest.AllocationPercent > 100)
                        {
                            <br>

                            <strong class="text-warning">Warning: Total allocation would exceed 100%!</strong>
                        }
                    </div>
                }

                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary me-2" @onclick="HideAssignmentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary"
                            disabled="@(isAssignmentSubmitting || isValidating || (currentValidation != null && !currentValidation.IsValid))">
                        @if (isAssignmentSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Create Assignment
                    </button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

<!-- Unassignment Modal -->
<SfDialog @bind-Visible="@showUnassignmentModal" Width="600px" Height="500px" IsModal="true">
    <DialogTemplates>
        <Header>Unassign Employee from @selectedSlot?.RoleName</Header>
        <Content>
            <EditForm Model="@unassignmentRequest" OnValidSubmit="@HandleUnassignmentSubmit">
                <DataAnnotationsValidator />

                @if (selectedAssignment != null)
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-user me-2"></i>Current Assignment Details</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                                    <p><strong>Role:</strong> @selectedAssignment.RoleName</p>
                                    <p><strong>Project:</strong> @selectedAssignment.ProjectName</p>
                                </div>
                                <div class="col-md-6">
                                    <p><strong>Start Date:</strong> @selectedAssignment.StartDate.ToString("yyyy-MM-dd")</p>
                                    <p><strong>Allocation:</strong> @selectedAssignment.AllocationPercent.ToString("F1")%</p>
                                    <p><strong>Status:</strong> <span class="badge bg-success">@selectedAssignment.Status</span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <div class="mb-3">
                    <label class="form-label">End Date *</label>
                    <InputDate @bind-value="unassignmentRequest.EndDate" class="form-control" />
                    <small class="form-text text-muted">Set the employee's exit date from this project</small>
                    <ValidationMessage For="@(() => unassignmentRequest.EndDate)" />
                </div>

                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This will set an end date for the employee's assignment to this project. The employee will be unassigned from the planned slot.
                </div>

                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary me-2" @onclick="HideUnassignmentModal">Cancel</button>
                    <button type="submit" class="btn btn-warning" disabled="@isUnassignmentSubmitting">
                        @if (isUnassignmentSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Unassign Employee
                    </button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

<!-- Delete Confirmation Dialog -->
<SfDialog @bind-Visible="@showDeleteDialog" Width="400px" Height="200px" IsModal="true">
    <DialogTemplates>
        <Header>Confirm Delete</Header>
        <Content>
            <p>Are you sure you want to delete this planning slot for <strong>@selectedSlot?.RoleName</strong>?</p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="@CancelDelete" />
        <DialogButton Content="Delete" IsPrimary="true" OnClick="@ConfirmDelete" />
    </DialogButtons>
</SfDialog>

<!-- Approve Assignment Modal -->
<SfDialog @bind-Visible="@showApprovalModal" Width="500px" Height="400px" IsModal="true">
    <DialogTemplates>
        <Header>Approve Assignment</Header>
        <Content>
            @if (selectedAssignment != null)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-user me-2"></i>Assignment Details</h6>
                    </div>
                    <div class="card-body">
                        <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                        <p><strong>Role:</strong> @selectedAssignment.RoleName</p>
                        <p><strong>Project:</strong> @selectedAssignment.ProjectName</p>
                        <p><strong>Start Date:</strong> @selectedAssignment.StartDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>Allocation:</strong> @selectedAssignment.AllocationPercent.ToString("F1")%</p>
                        <p><strong>Status:</strong> <span class="badge bg-warning">Planned</span></p>
                    </div>
                </div>
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong>Approve this assignment?</strong>
                    <p class="mb-0 mt-2">This will activate the assignment and the employee will start working on the project.</p>
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="@CancelApproval" />
        <DialogButton Content="Approve" IsPrimary="true" OnClick="@ConfirmApproval" />
    </DialogButtons>
</SfDialog>

<!-- Reject Assignment Modal -->
<SfDialog @bind-Visible="@showRejectModal" Width="500px" Height="450px" IsModal="true">
    <DialogTemplates>
        <Header>Reject Assignment</Header>
        <Content>
            @if (selectedAssignment != null)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-user me-2"></i>Assignment Details</h6>
                    </div>
                    <div class="card-body">
                        <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                        <p><strong>Role:</strong> @selectedAssignment.RoleName</p>
                        <p><strong>Project:</strong> @selectedAssignment.ProjectName</p>
                        <p><strong>Start Date:</strong> @selectedAssignment.StartDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>Allocation:</strong> @selectedAssignment.AllocationPercent.ToString("F1")%</p>
                        <p><strong>Status:</strong> <span class="badge bg-warning">Planned</span></p>
                    </div>
                </div>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Reject this assignment?</strong>
                </div>
                <div class="mb-3">
                    <label class="form-label">Rejection Reason *</label>
                    <textarea @bind="rejectReason" class="form-control" rows="3" placeholder="Please provide a reason for rejection..." required></textarea>
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="@CancelReject" />
        <DialogButton Content="Reject" IsPrimary="true" OnClick="@ConfirmReject" />
    </DialogButtons>
</SfDialog>

<!-- Approve Assignment from Grid Confirmation -->
<SfDialog @bind-Visible="@showApproveAssignmentDialog" Width="450px" Height="250px" IsModal="true">
    <DialogTemplates>
        <Header>Confirm Approve Assignment</Header>
        <Content>
            @if (selectedAssignment != null)
            {
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong>Approve this assignment?</strong>
                </div>
                <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                <p><strong>Allocation:</strong> @selectedAssignment.AllocationPercent.ToString("F1")%</p>
                <p><strong>Period:</strong> @selectedAssignment.StartDate.ToString("yyyy-MM-dd") to @(selectedAssignment.EndDate?.ToString("yyyy-MM-dd") ?? "Ongoing")</p>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="@CancelApproveAssignment" />
        <DialogButton Content="Approve" IsPrimary="true" OnClick="@ConfirmApproveAssignment" />
    </DialogButtons>
</SfDialog>

<!-- Decline Assignment from Grid Confirmation -->
<SfDialog @bind-Visible="@showDeclineAssignmentDialog" Width="500px" Height="350px" IsModal="true">
    <DialogTemplates>
        <Header>Decline Assignment</Header>
        <Content>
            @if (selectedAssignment != null)
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Decline this assignment?</strong>
                </div>
                <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                <p><strong>Allocation:</strong> @selectedAssignment.AllocationPercent.ToString("F1")%</p>
                <p><strong>Period:</strong> @selectedAssignment.StartDate.ToString("yyyy-MM-dd") to @(selectedAssignment.EndDate?.ToString("yyyy-MM-dd") ?? "Ongoing")</p>
                <div class="mb-3 mt-3">
                    <label class="form-label">Decline Reason *</label>
                    <textarea @bind="declineReason" class="form-control" rows="3" placeholder="Please provide a reason for declining..." required></textarea>
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="@CancelDeclineAssignment" />
        <DialogButton Content="Decline" IsPrimary="true" OnClick="@ConfirmDeclineAssignment" />
    </DialogButtons>
</SfDialog>

<!-- Assignment Details Modal -->
<SfDialog @bind-Visible="@showDetailsModalFlag" Width="800px" Height="700px" IsModal="true">
    <DialogTemplates>
        <Header>Assignment Details</Header>
        <Content>
            @if (selectedAssignment != null)
            {
                <div class="row">
                    <div class="col-md-6">
                        <h6>Employee Information</h6>
                        <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                        <p><strong>Email:</strong> @selectedAssignment.EmployeeEmail</p>
                        <p><strong>Phone:</strong> @selectedAssignment.EmployeePhone</p>
                        <p><strong>Role:</strong> @selectedAssignment.RoleName</p>
                        <p><strong>Salary:</strong> @selectedAssignment.EmployeeSalary.ToString("C")</p>
                        <p><strong>Monthly Incentive:</strong> @selectedAssignment.EmployeeMonthlyIncentive.ToString("C")</p>

                        <h6 class="mt-3">Assignment Details</h6>
                        <p><strong>Allocation:</strong> @selectedAssignment.AllocationPercent.ToString("F1")%</p>
                        <p><strong>Start Date:</strong> @selectedAssignment.StartDate.ToString("yyyy-MM-dd")</p>
                        <p><strong>End Date:</strong> @(selectedAssignment.EndDate?.ToString("yyyy-MM-dd") ?? "Ongoing")</p>
                        <p><strong>Duration:</strong> @selectedAssignment.DurationDays days</p>
                        <p><strong>Utilization:</strong> @selectedAssignment.UtilizationPercent.ToString("F1")%</p>
                        <p><strong>Status:</strong> <span class="badge @(selectedAssignment.Status == AssignmentStatus.Active ? "bg-success" : "bg-primary")">@selectedAssignment.Status</span></p>
                    </div>
                    <div class="col-md-6">
                        <h6>Project Information</h6>
                        <p><strong>Project:</strong> @selectedAssignment.ProjectName</p>
                        <p><strong>Client:</strong> @selectedAssignment.ClientName</p>
                        <p><strong>Project Period:</strong> @selectedAssignment.ProjectStartDate.ToString("yyyy-MM-dd") - @selectedAssignment.ProjectEndDate.ToString("yyyy-MM-dd")</p>

                        <h6 class="mt-3">Salary Snapshot</h6>
                        @if (selectedAssignment.SnapshotSalary.HasValue || selectedAssignment.SnapshotMonthlyIncentive.HasValue || selectedAssignment.SnapshotCommissionPercent.HasValue)
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-camera me-2"></i>
                                This assignment uses a point-in-time salary snapshot.
                            </div>
                            <p><strong>Snapshot Salary:</strong> @(selectedAssignment.SnapshotSalary?.ToString("C") ?? "N/A")</p>
                            <p><strong>Snapshot Monthly Incentive:</strong> @(selectedAssignment.SnapshotMonthlyIncentive?.ToString("C") ?? "N/A")</p>
                            <p><strong>Snapshot Commission %:</strong> @(selectedAssignment.SnapshotCommissionPercent?.ToString("F1") ?? "N/A")%</p>
                        }
                        else
                        {
                            <p class="text-muted"><em>No salary snapshot - using employee master data</em></p>
                        }

                        <h6 class="mt-3">Cost Analysis</h6>
                        <p><strong>Planned Cost:</strong> @selectedAssignment.PlannedCostShare.ToString("C")</p>
                        <p><strong>Actual Cost:</strong> @selectedAssignment.ActualCost.ToString("C")</p>
                        <p>
                            <strong>Cost Variance:</strong>
                            <span class="@(selectedAssignment.CostVariance <= 0 ? "text-success" : "text-danger")">
                                @selectedAssignment.CostVariance.ToString("C")
                                @if (selectedAssignment.CostVariance <= 0)
                                {
                                    <i class="fas fa-check-circle ms-1"></i>
                                    <small>(Under/On Budget)</small>
                                }
                                else
                                {
                                    <i class="fas fa-exclamation-triangle ms-1"></i>
                                    <small>(Over Budget)</small>
                                }
                            </span>
                        </p>

                        @if (!string.IsNullOrEmpty(selectedAssignment.Notes))
                        {
                            <h6 class="mt-3">Notes</h6>
                            <p>@selectedAssignment.Notes</p>
                        }

                        <h6 class="mt-3">Audit Information</h6>
                        <p><strong>Created:</strong> @selectedAssignment.CreatedAt.ToString("yyyy-MM-dd HH:mm") by @selectedAssignment.CreatedBy</p>
                        @if (selectedAssignment.ModifiedAt.HasValue)
                        {
                            <p><strong>Modified:</strong> @selectedAssignment.ModifiedAt.Value.ToString("yyyy-MM-dd HH:mm") by @selectedAssignment.ModifiedBy</p>
                        }
                        @if (selectedAssignment.ApprovedOn.HasValue)
                        {
                            <p><strong>Approved:</strong> @selectedAssignment.ApprovedOn.Value.ToString("yyyy-MM-dd HH:mm") by @selectedAssignment.ApprovedByUserId</p>
                        }
                    </div>
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Close" IsPrimary="true" OnClick="@HideDetailsModal" />
    </DialogButtons>
</SfDialog>

<!-- Edit Assignment Modal -->
<SfDialog @bind-Visible="@showEditAssignmentModal" Width="700px" Height="700px" IsModal="true">
    <DialogTemplates>
        <Header>Edit Assignment</Header>
        <Content>
            <EditForm Model="@editAssignmentRequest" OnValidSubmit="@HandleEditAssignmentSubmit">
                <DataAnnotationsValidator />

                @if (selectedAssignment != null)
                {
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-info-circle me-2"></i>Assignment Information</h6>
                        </div>
                        <div class="card-body">
                            <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                            <p><strong>Role:</strong> @selectedAssignment.RoleName</p>
                            <p><strong>Project:</strong> @selectedAssignment.ProjectName</p>
                            <p><strong>Status:</strong> <span class="badge @(selectedAssignment.Status == AssignmentStatus.Active ? "bg-success" : "bg-primary")">@selectedAssignment.Status</span></p>
                        </div>
                    </div>
                }

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Start Date *</label>
                            <InputDate @bind-value="editAssignmentRequest.StartDate" class="form-control" />
                            <ValidationMessage For="@(() => editAssignmentRequest.StartDate)" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">End Date</label>
                            <InputDate @bind-value="editAssignmentRequest.EndDate" class="form-control" />
                            <small class="form-text text-muted">Leave empty for ongoing assignment. Cannot be in the future.</small>
                            <ValidationMessage For="@(() => editAssignmentRequest.EndDate)" />
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Allocation % *</label>
                    <InputNumber @bind-value="editAssignmentRequest.AllocationPercent" class="form-control" min="0" max="100" step="1" />
                    <ValidationMessage For="@(() => editAssignmentRequest.AllocationPercent)" />
                </div>

                <div class="card mb-3 border-info">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0"><i class="fas fa-camera me-2"></i>Salary Snapshot</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Snapshot Salary</label>
                                    <InputNumber @bind-value="editAssignmentRequest.SnapshotSalary" class="form-control" step="0.01" />
                                    <ValidationMessage For="@(() => editAssignmentRequest.SnapshotSalary)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Snapshot Monthly Incentive</label>
                                    <InputNumber @bind-value="editAssignmentRequest.SnapshotMonthlyIncentive" class="form-control" step="0.01" />
                                    <ValidationMessage For="@(() => editAssignmentRequest.SnapshotMonthlyIncentive)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Snapshot Commission %</label>
                                    <InputNumber @bind-value="editAssignmentRequest.SnapshotCommissionPercent" class="form-control" step="0.01" min="0" max="100" />
                                    <ValidationMessage For="@(() => editAssignmentRequest.SnapshotCommissionPercent)" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Snapshot Tickets</label>
                                    <InputNumber @bind-value="editAssignmentRequest.SnapshotTickets" class="form-control" step="0.01" />
                                    <ValidationMessage For="@(() => editAssignmentRequest.SnapshotTickets)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Snapshot Hoteling</label>
                                    <InputNumber @bind-value="editAssignmentRequest.SnapshotHoteling" class="form-control" step="0.01" />
                                    <ValidationMessage For="@(() => editAssignmentRequest.SnapshotHoteling)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Snapshot Others</label>
                                    <InputNumber @bind-value="editAssignmentRequest.SnapshotOthers" class="form-control" step="0.01" />
                                    <ValidationMessage For="@(() => editAssignmentRequest.SnapshotOthers)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Notes</label>
                    <InputTextArea @bind-value="editAssignmentRequest.Notes" class="form-control" rows="3" placeholder="Optional notes..." />
                    <ValidationMessage For="@(() => editAssignmentRequest.Notes)" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-secondary me-2" @onclick="HideEditAssignmentModal">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isEditAssignmentSubmitting">
                        @if (isEditAssignmentSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Save Changes
                    </button>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

<!-- Delete Assignment Confirmation Dialog -->
<SfDialog @bind-Visible="@showDeleteAssignmentDialog" Width="500px" Height="250px" IsModal="true">
    <DialogTemplates>
        <Header>Confirm Delete</Header>
        <Content>
            @if (selectedAssignment != null)
            {
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Are you sure you want to delete this assignment?</strong>
                </div>
                <p><strong>Employee:</strong> @selectedAssignment.EmployeeName</p>
                <p><strong>Role:</strong> @selectedAssignment.RoleName</p>
                <p><strong>Project:</strong> @selectedAssignment.ProjectName</p>
                <p class="text-muted">This action cannot be undone.</p>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="@CancelDeleteAssignment" />
        <DialogButton Content="Delete" IsPrimary="true" OnClick="@ConfirmDeleteAssignment" />
    </DialogButtons>
</SfDialog>

<SfToast @ref="toastObj" Title="Notification" Timeout="5000" ShowProgressBar="false"></SfToast>

@code {
    [Parameter] public Guid? ProjectId { get; set; }
    [SupplyParameterFromQuery(Name = "projectId")] public Guid? ProjectIdQuery { get; set; }
    private Guid? EffectiveProjectId => ProjectId ?? ProjectIdQuery;

    // Disposal & redirect guards
    private bool _disposed;
    private bool _shouldRedirectToProjects;

    // Optional CTS if you want extra cancellation
    private readonly CancellationTokenSource _cts = new();
    private CancellationToken Token => _cts.Token;

    private List<PlannedTeamSlotDto>? plannedSlots;
    private TeamPlanningKpiDto? projectKpis;
    private List<ProjectDto>? projects;
    private List<RolesCatalogDto>? roles;
    private List<EmployeeDto>? employees;
    private List<EmployeeDto>? availableEmployees;
    private ProjectDto? currentProject;
    private Guid? selectedProjectId;
    private bool isLoading = false;
    private bool showModal = false;
    private bool showDeleteDialog = false;
    private bool showAssignmentModal = false;
    private bool showUnassignmentModal = false;
    private bool showApprovalModal = false;
    private bool showRejectModal = false;
    private bool showApproveAssignmentDialog = false;
    private bool showDeclineAssignmentDialog = false;
    private string declineReason = string.Empty;
    private bool isEdit = false;
    private bool isSubmitting = false;
    private bool isAssignmentSubmitting = false;
    private bool isUnassignmentSubmitting = false;
    private bool isEditAssignmentSubmitting = false;
    private bool showEditAssignmentModal = false;
    private bool showDeleteAssignmentDialog = false;
    private PlannedTeamSlotDto? selectedSlot;
    private EmployeeDto? selectedEmployee;
    private ActualAssignmentDto? selectedAssignment;
    private CreatePlannedTeamSlotCommand slotRequest = new();
    private CreateActualAssignmentCommand assignmentRequest = new();
    private UnassignActualAssignmentCommand unassignmentRequest = new();
    private UpdateActualAssignmentCommand editAssignmentRequest = new();
    private decimal employeeCurrentAllocation = 0;
    private decimal costVariance = 0;
    private string rejectReason = string.Empty;
    private SfToast? toastObj;

    // Realtime validation state
    private AssignmentValidationResult? currentValidation;
    private bool isValidating = false;
    private System.Threading.Timer? validationDebounceTimer;
    private DateTime lastValidationRequest = DateTime.MinValue;
    private const int ValidationDebounceMs = 350;

    // Grid 2 properties
    private SfGrid<PlannedTeamSlotDto>? plannedSlotsGrid;
    private List<ActualAssignmentDto>? slotAssignments;
    private bool isLoadingAssignments = false;
    private bool showAssignmentsGrid = true; // Feature flag
    private bool showDetailsModalFlag = false;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (_disposed) return;

            await LoadProjects();
            if (_disposed) return;

            await LoadRoles();
            if (_disposed) return;

            await LoadEmployees();
            if (_disposed) return;

            if (EffectiveProjectId.HasValue)
            {
                await ValidateAndSetCurrentProject();
                if (_disposed || currentProject == null) return;
            }
            else
            {
                // Defer redirect to OnAfterRenderAsync to avoid disposal during diff
                _shouldRedirectToProjects = true;
                return;
            }

            await LoadPlannedSlots();
        }
        catch when (_disposed)
        {
            // ignore if disposed during awaits
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error initializing page: {ex.Message}");
            _shouldRedirectToProjects = true; // also defer
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (_disposed) return Task.CompletedTask;

        if (_shouldRedirectToProjects)
        {
            _shouldRedirectToProjects = false;
            // navigate AFTER render to avoid disposing mid-diff
            Navigation.NavigateTo("/projects");
        }

        return Task.CompletedTask;
    }

    private async Task LoadProjects()
    {
        try
        {
            var list = await ProjectService.GetAllAsync();
            if (_disposed) return;
            projects = list.ToList();
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading projects: {ex.Message}");
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            var list = await RolesCatalogService.GetAllAsync();
            if (_disposed) return;
            roles = list.ToList();
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading roles: {ex.Message}");
        }
    }

    private async Task LoadEmployees()
    {
        try
        {
            var list = await EmployeeService.GetAllAsync();
            if (_disposed) return;
            employees = list.ToList();
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading employees: {ex.Message}");
        }
    }

    private async Task ValidateAndSetCurrentProject()
    {
        if (_disposed) return;
        if (!EffectiveProjectId.HasValue) return;

        if (projects == null || !projects.Any())
        {
            await ShowError("No projects found.");
            _shouldRedirectToProjects = true; // defer
            return;
        }

        currentProject = projects.FirstOrDefault(p => p.Id == EffectiveProjectId.Value);
        if (currentProject != null)
        {
            selectedProjectId = EffectiveProjectId.Value;
        }
        else
        {
            await ShowError($"Project with ID {EffectiveProjectId.Value} not found.");
            _shouldRedirectToProjects = true; // defer
        }
    }

    private async Task LoadPlannedSlots()
    {
        if (_disposed) return;

        var loadStartTime = DateTime.UtcNow;
        isLoading = true;
        try
        {
            // Telemetry: Assignments.AutoCompleted
            try
            {
                var currentUser = await CurrentUserService.GetCurrentUserAsync();
                var userId = currentUser?.Id ?? "System";
                var autoCompleteResult = await AssignmentService.AutoCompleteAssignmentsAsync(userId);

                if (!_disposed)
                {
                    // Telemetry: Log auto-complete operation
                    var telemetryData = new
                    {
                        Event = "Assignments.AutoCompleted",
                        TransitionsCount = autoCompleteResult.CompletedCount,
                        DurationMs = autoCompleteResult.Duration.TotalMilliseconds,
                        Errors = autoCompleteResult.Errors.Count,
                        IsSuccessful = autoCompleteResult.IsSuccessful,
                        Timestamp = DateTime.UtcNow
                    };

                    if (autoCompleteResult.CompletedCount > 0)
                    {
                        Console.WriteLine($"[Telemetry] {System.Text.Json.JsonSerializer.Serialize(telemetryData)}");
                    }
                }
            }
            catch (Exception ex)
            {
                // Log but don't block - auto-complete is a background operation
                Console.WriteLine($"[Telemetry] Assignments.AutoCompleted failed: {ex.Message}");
            }

            var projectIdToFilter = EffectiveProjectId ?? selectedProjectId;

            if (projectIdToFilter.HasValue)
            {
                var slots = await PlannedTeamSlotService.GetSlotsByProjectAsync(projectIdToFilter.Value);
                if (_disposed) return;
                plannedSlots = slots?.ToList() ?? new List<PlannedTeamSlotDto>();
            }
            else
            {
                plannedSlots = new List<PlannedTeamSlotDto>();
                if (projects != null)
                {
                    foreach (var project in projects)
                    {
                        var projectSlots = await PlannedTeamSlotService.GetSlotsByProjectAsync(project.Id);
                        if (_disposed) return;
                        if (projectSlots != null) plannedSlots.AddRange(projectSlots);
                    }
                }
            }

            // Load KPIs if a project is selected
            if (projectIdToFilter.HasValue && !_disposed)
            {
                try
                {
                    projectKpis = await PlannedTeamSlotService.GetProjectKpisAsync(projectIdToFilter.Value);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Error] Failed to load KPIs: {ex.Message}");
                    projectKpis = null;
                }
            }
            else
            {
                projectKpis = null;
            }

            // Telemetry: TeamPlanning.Grid1AggregatesLoaded (kept for backward compatibility)
            if (!_disposed && plannedSlots != null)
            {
                var loadDuration = DateTime.UtcNow - loadStartTime;
                var telemetryData = new
                {
                    Event = "TeamPlanning.Grid1AggregatesLoaded",
                    RowsLoaded = plannedSlots.Count,
                    TimingMs = loadDuration.TotalMilliseconds,
                    TotalPlannedCost = plannedSlots.Sum(s => s.PlannedCost),
                    TotalActualCost = plannedSlots.Sum(s => s.ActualCost),
                    TotalVariance = plannedSlots.Sum(s => s.Variance),
                    Timestamp = DateTime.UtcNow
                };
                Console.WriteLine($"[Telemetry] {System.Text.Json.JsonSerializer.Serialize(telemetryData)}");
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading planned slots: {ex.Message}");

            // Telemetry: Log error
            Console.WriteLine($"[Telemetry] TeamPlanning.Grid1AggregatesLoaded failed: {ex.Message}");
        }
        finally
        {
            if (!_disposed) isLoading = false;
        }
    }

    private async Task OnProjectChanged(ChangeEventArgs<Guid?, ProjectDto> args)
    {
        if (_disposed) return;
        selectedProjectId = args.Value;
        await LoadPlannedSlots();
    }

    private void ShowCreateModal()
    {
        if (_disposed) return;

        isEdit = false;
        var projectIdToUse = EffectiveProjectId ?? selectedProjectId ?? Guid.Empty;

        // Get project period from the current or selected project
        var project = currentProject ?? projects?.FirstOrDefault(p => p.Id == projectIdToUse);
        var periodMonths = project?.ExpectedWorkingPeriodMonths ?? 1m;

        // If period is 0 or negative, calculate from project dates as fallback
        if (periodMonths <= 0 && project != null)
        {
            var days = (project.EndDate - project.StartDate).Days;
            periodMonths = days / 30.0m; // Convert days to months
        }

        // Final fallback to 1 month if still invalid
        if (periodMonths <= 0)
        {
            periodMonths = 1m;
        }

        slotRequest = new CreatePlannedTeamSlotCommand
        {
            ProjectId = projectIdToUse,
            AllocationPercent = 100,
            PeriodMonths = periodMonths
        };
        showModal = true;
    }

    private void ShowEditModal(PlannedTeamSlotDto slot)
    {
        if (_disposed) return;

        isEdit = true;
        selectedSlot = slot;
        slotRequest = new CreatePlannedTeamSlotCommand
        {
            ProjectId = slot.ProjectId,
            RoleId = slot.RoleId,
            PeriodMonths = slot.PeriodMonths,
            AllocationPercent = slot.AllocationPercent,
            PlannedSalary = slot.PlannedSalary,
            PlannedIncentive = slot.PlannedIncentive,
            PlannedCommissionPercent = slot.PlannedCommissionPercent,
            PlannedTickets = slot.PlannedTickets,
            PlannedHoteling = slot.PlannedHoteling,
            PlannedOthers = slot.PlannedOthers
        };
        showModal = true;
    }

    private async Task ShowAssignmentModal(PlannedTeamSlotDto slot)
    {
        if (_disposed) return;

        selectedSlot = slot;
        selectedEmployee = null;
        costVariance = 0;
        employeeCurrentAllocation = 0;

        if (employees != null)
            availableEmployees = employees.Where(e => e.IsActive).ToList();

        // Get the project for date ranges
        var project = currentProject ?? projects?.FirstOrDefault(p => p.Id == slot.ProjectId);

        // Smart default dates
        DateTime defaultStartDate = project?.StartDate ?? DateTime.Today;
        DateTime? defaultEndDate = project?.EndDate;

        try
        {
            // Get the most recent completed assignment end date in this project
            var mostRecentEndDate = await AssignmentService.GetMostRecentCompletedAssignmentEndDateAsync(slot.ProjectId, selectedSlot.Id);

            if (_disposed) return;

            if (mostRecentEndDate.HasValue)
            {
                // Start the next assignment the day after the most recent completed assignment
                var suggestedStartDate = mostRecentEndDate.Value.AddDays(1);

                // Use the more recent date between project start and suggested start
                defaultStartDate = suggestedStartDate > defaultStartDate ? suggestedStartDate : defaultStartDate;
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            Console.WriteLine($"[Warning] Could not fetch recent assignment dates: {ex.Message}");
            // Continue with project start date as default
        }

        assignmentRequest = new CreateActualAssignmentCommand
        {
            ProjectId = slot.ProjectId,
            PlannedTeamSlotId = slot.Id,
            StartDate = defaultStartDate,
            EndDate = defaultEndDate,
            AllocationPercent = slot.AllocationPercent
        };

        showAssignmentModal = true;
    }

    private async Task OnAssignmentEmployeeChanged(ChangeEventArgs<Guid, EmployeeDto> args)
    {
        if (_disposed) return;

        assignmentRequest.EmployeeId = args.Value;
        selectedEmployee = availableEmployees?.FirstOrDefault(e => e.Id == args.Value);

        if (selectedEmployee != null)
        {
            var startDate = assignmentRequest.StartDate;
            var endDate = assignmentRequest.EndDate ?? currentProject?.EndDate ?? DateTime.Today.AddMonths(1);

            try
            {
                var alloc = await AssignmentService.GetEmployeeAllocationAsync(selectedEmployee.Id, startDate, endDate);
                if (_disposed) return;

                employeeCurrentAllocation = alloc;
                CalculateCostVariance();

                // Trigger realtime validation
                TriggerRealtimeValidation();

                if (!_disposed)
                {
                    // Avoid calling StateHasChanged if disposed
                    StateHasChanged();
                }
            }
            catch when (_disposed)
            {
                // ignore
            }
            catch
            {
                if (_disposed) return;
                employeeCurrentAllocation = 0;
            }
        }
        else
        {
            if (_disposed) return;
            employeeCurrentAllocation = 0;
            costVariance = 0;
            currentValidation = null;
        }
    }

    private void CalculateCostVariance()
    {
        if (_disposed) return;

        if (selectedEmployee != null && selectedSlot != null && currentProject != null)
        {
            var empCommissionAmount = (selectedEmployee.CommissionPercent / 100m) * currentProject.ProjectPrice;
            var empCostPerMonth = selectedEmployee.Salary + selectedEmployee.MonthlyIncentive + empCommissionAmount;

            var plannedCommissionAmount = (selectedSlot.PlannedCommissionPercent / 100m) * currentProject.ProjectPrice;
            var plannedCostPerMonth = selectedSlot.PlannedSalary + selectedSlot.PlannedIncentive + plannedCommissionAmount;

            costVariance = empCostPerMonth - plannedCostPerMonth;
        }
    }

    private async Task HandleSubmit()
    {
        if (_disposed) return;

        isSubmitting = true;
        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            if (isEdit && selectedSlot != null)
            {
                var updateCommand = new UpdatePlannedTeamSlotCommand
                {
                    Id = selectedSlot.Id,
                    RoleId = slotRequest.RoleId,
                    PeriodMonths = slotRequest.PeriodMonths,
                    AllocationPercent = slotRequest.AllocationPercent,
                    PlannedSalary = slotRequest.PlannedSalary,
                    PlannedIncentive = slotRequest.PlannedIncentive,
                    PlannedCommissionPercent = slotRequest.PlannedCommissionPercent,
                    PlannedTickets = slotRequest.PlannedTickets,
                    PlannedHoteling = slotRequest.PlannedHoteling,
                    PlannedOthers = slotRequest.PlannedOthers,
                    RowVersion = selectedSlot.RowVersion ?? new byte[0]
                };

                await PlannedTeamSlotService.UpdateSlotAsync(updateCommand, userId);
                if (_disposed) return;
                await ShowSuccess("Planning slot updated successfully!");
            }
            else
            {
                await PlannedTeamSlotService.CreateSlotAsync(slotRequest, userId);
                if (_disposed) return;
                await ShowSuccess("Planning slot created successfully!");
            }

            await LoadPlannedSlots();
            if (_disposed) return;
            HideModal();
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error saving planning slot: {ex.Message}");
        }
        finally
        {
            if (!_disposed) isSubmitting = false;
        }
    }

    private async Task HandleAssignmentSubmit()
    {
        if (_disposed) return;

        isAssignmentSubmitting = true;
        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";
            var result = await AssignmentService.CreateAsync(assignmentRequest, userId);

            if (_disposed) return;

            if (result.IsSuccessful)
            {
                //add warns if any to the toast
                if (result.Warnings.Any())
                {
                    var warns = string.Join("<br/>", result.Warnings);
                    await ShowError($"Assignment created with warnings:<br/>{warns}");
                }
                else
                {
                    await ShowSuccess("Assignment created successfully and is pending approval!");
                }

                await LoadPlannedSlots();
                if (_disposed) return;
                HideAssignmentModal();
            }
            else
            {
                //add the error messages to the toast
                var errors = string.Join("<br/>", result.Errors);
                await ShowError($"Assignment creation failed:<br/>{errors}");


                //await ShowError("Assignment creation failed. Please check the details and try again.");
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error creating assignment: {ex.Message}");
        }
        finally
        {
            if (!_disposed) isAssignmentSubmitting = false;
        }
    }

    private void HideModal()
    {
        if (_disposed) return;
        showModal = false;
        selectedSlot = null;
        slotRequest = new CreatePlannedTeamSlotCommand();
    }

    private void HideAssignmentModal()
    {
        if (_disposed) return;
        showAssignmentModal = false;
        selectedSlot = null;
        selectedEmployee = null;
        assignmentRequest = new CreateActualAssignmentCommand();
        availableEmployees = new List<EmployeeDto>();
        employeeCurrentAllocation = 0;
        costVariance = 0;
        currentValidation = null;
        isValidating = false;
        validationDebounceTimer?.Dispose();
        validationDebounceTimer = null;
    }

    private void TriggerRealtimeValidation()
    {
        if (_disposed) return;

        // Cancel existing timer
        validationDebounceTimer?.Dispose();

        // Record request time
        lastValidationRequest = DateTime.UtcNow;

        // Start new debounce timer
        validationDebounceTimer = new System.Threading.Timer(async _ =>
        {
            if (_disposed) return;

            await InvokeAsync(async () =>
            {
                if (_disposed) return;
                await PerformRealtimeValidation();
            });
        }, null, ValidationDebounceMs, Timeout.Infinite);
    }

    private async Task PerformRealtimeValidation()
    {
        if (_disposed || assignmentRequest.EmployeeId == Guid.Empty) return;

        try
        {
            isValidating = true;
            StateHasChanged();

            var validationCommand = new CreateActualAssignmentCommand
            {
                ProjectId = assignmentRequest.ProjectId,
                PlannedTeamSlotId = assignmentRequest.PlannedTeamSlotId,
                EmployeeId = assignmentRequest.EmployeeId,
                StartDate = assignmentRequest.StartDate,
                EndDate = assignmentRequest.EndDate,
                AllocationPercent = assignmentRequest.AllocationPercent,
                Notes = assignmentRequest.Notes
            };

            currentValidation = await AssignmentService.ValidateAssignmentRealtimeAsync(validationCommand);

            if (_disposed) return;
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            Console.WriteLine($"[Validation Error] {ex.Message}");
            currentValidation = new AssignmentValidationResult
            {
                IsValid = false,
                Severity = ValidationSeverity.Error,
                BlockingErrors = new List<string> { $"Validation error: {ex.Message}" }
            };
        }
        finally
        {
            if (!_disposed)
            {
                isValidating = false;
                StateHasChanged();
            }
        }
    }

    private void ApplySuggestedWindow(SuggestedWindow window)
    {
        if (_disposed || window == null) return;

        assignmentRequest.StartDate = window.StartDate;
        assignmentRequest.EndDate = window.EndDate;

        TriggerRealtimeValidation();
        StateHasChanged();
    }

    private string GetValidationBorderClass(ValidationSeverity severity)
    {
        return severity switch
        {
            ValidationSeverity.Error => "danger",
            ValidationSeverity.Warning => "warning",
            ValidationSeverity.Info => "info",
            _ => "success"
        };
    }

    private string GetValidationBgClass(ValidationSeverity severity)
    {
        return severity switch
        {
            ValidationSeverity.Error => "danger",
            ValidationSeverity.Warning => "warning",
            ValidationSeverity.Info => "info",
            _ => "success"
        };
    }

    private string GetValidationIcon(ValidationSeverity severity)
    {
        return severity switch
        {
            ValidationSeverity.Error => "fa-exclamation-circle",
            ValidationSeverity.Warning => "fa-exclamation-triangle",
            ValidationSeverity.Info => "fa-info-circle",
            _ => "fa-check-circle"
        };
    }

    private string GetValidationStatusText(ValidationSeverity severity)
    {
        return severity switch
        {
            ValidationSeverity.Error => "Error",
            ValidationSeverity.Warning => "Warning",
            ValidationSeverity.Info => "Info",
            _ => "Valid"
        };
    }

    private async Task ShowUnassignmentModal(PlannedTeamSlotDto slot)
    {
        if (_disposed) return;

        selectedSlot = slot;
        selectedAssignment = null;

        try
        {
            var assignments = await AssignmentService.GetAssignmentsAsync(slot.ProjectId, null);
            if (_disposed) return;

            // Find assignment linked to this planned slot that is active or planned and not yet ended
            // Priority: 1) Active assignments, 2) Planned assignments
            selectedAssignment = assignments
                .Where(a => a.PlannedTeamSlotId == slot.Id &&
                           (a.Status == AssignmentStatus.Active || a.Status == AssignmentStatus.Planned))
                .OrderByDescending(a => a.Status == AssignmentStatus.Active ? 1 : 0) // Prefer Active over Planned
                .ThenByDescending(a => a.StartDate)
                .FirstOrDefault();

            if (selectedAssignment != null)
            {
                unassignmentRequest = new UnassignActualAssignmentCommand
                {
                    AssignmentId = selectedAssignment.Id,
                    EndDate = DateTime.Today
                };

                showUnassignmentModal = true;
            }
            else
            {
                await ShowError("No active assignment found for this slot.");
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading assignment details: {ex.Message}");
        }
    }

    private async Task HandleUnassignmentSubmit()
    {
        if (_disposed || selectedAssignment == null) return;

        isUnassignmentSubmitting = true;
        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";
            await AssignmentService.UnassignAsync(unassignmentRequest, userId);
            if (_disposed) return;

            await ShowSuccess("Employee unassigned successfully!");
            await LoadPlannedSlots();
            if (_disposed) return;
            HideUnassignmentModal();
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error unassigning employee: {ex.Message}");
        }
        finally
        {
            if (!_disposed) isUnassignmentSubmitting = false;
        }
    }

    private void HideUnassignmentModal()
    {
        if (_disposed) return;
        showUnassignmentModal = false;
        selectedSlot = null;
        selectedAssignment = null;
        unassignmentRequest = new UnassignActualAssignmentCommand();
    }

    // Grid 2: Row selection and assignment loading
    private async Task OnSlotSelected(RowSelectEventArgs<PlannedTeamSlotDto> args)
    {
        if (_disposed || args.Data == null) return;

        selectedSlot = args.Data;
        await LoadSlotAssignments();
    }

    private async Task LoadSlotAssignments()
    {
        if (_disposed || selectedSlot == null) return;

        isLoadingAssignments = true;
        try
        {
            slotAssignments = await AssignmentService.GetAssignmentsBySlotAsync(selectedSlot.Id, selectedSlot.RoleId);
            if (_disposed) return;

            if (!_disposed)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading assignments: {ex.Message}");
        }
        finally
        {
            if (!_disposed) isLoadingAssignments = false;
        }
    }

    private void ShowUnassignModalFromGrid(ActualAssignmentDto assignment)
    {
        if (_disposed) return;

        selectedAssignment = assignment;
        unassignmentRequest = new UnassignActualAssignmentCommand
        {
            AssignmentId = assignment.Id,
            EndDate = DateTime.Today
        };

        showUnassignmentModal = true;
    }

    private void ShowDetailsModal(ActualAssignmentDto assignment)
    {
        if (_disposed) return;
        selectedAssignment = assignment;
        showDetailsModalFlag = true;
    }

    private void HideDetailsModal()
    {
        if (_disposed) return;
        showDetailsModalFlag = false;
        selectedAssignment = null;
    }

    // Approval and Reject methods
    private async Task ShowApprovalModal(PlannedTeamSlotDto slot)
    {
        if (_disposed) return;

        selectedSlot = slot;
        selectedAssignment = null;

        try
        {
            var assignments = await AssignmentService.GetAssignmentsAsync(slot.ProjectId, null);
            if (_disposed) return;

            selectedAssignment = assignments
                .Where(a => a.PlannedTeamSlotId == slot.Id && a.Status == AssignmentStatus.Planned)
                .OrderByDescending(a => a.StartDate)
                .FirstOrDefault();

            if (selectedAssignment != null)
            {
                showApprovalModal = true;
            }
            else
            {
                await ShowError("No planned assignment found for this slot.");
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading assignment details: {ex.Message}");
        }
    }

    private void CancelApproval()
    {
        if (_disposed) return;
        showApprovalModal = false;
        selectedSlot = null;
        selectedAssignment = null;
    }

    private async Task ConfirmApproval()
    {
        if (_disposed || selectedAssignment == null) return;

        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            await AssignmentService.ApproveAsync(selectedAssignment.Id, userId);
            if (_disposed) return;

            await ShowSuccess("Assignment approved successfully!");
            await LoadPlannedSlots();
            if (_disposed) return;

            showApprovalModal = false;
            selectedSlot = null;
            selectedAssignment = null;
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error approving assignment: {ex.Message}");
        }
    }

    private async Task ShowRejectModal(PlannedTeamSlotDto slot)
    {
        if (_disposed) return;

        selectedSlot = slot;
        selectedAssignment = null;
        rejectReason = string.Empty;

        try
        {
            var assignments = await AssignmentService.GetAssignmentsAsync(slot.ProjectId, null);
            if (_disposed) return;

            selectedAssignment = assignments
                .Where(a => a.PlannedTeamSlotId == slot.Id && a.Status == AssignmentStatus.Planned)
                .OrderByDescending(a => a.StartDate)
                .FirstOrDefault();

            if (selectedAssignment != null)
            {
                showRejectModal = true;
            }
            else
            {
                await ShowError("No planned assignment found for this slot.");
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error loading assignment details: {ex.Message}");
        }
    }

    private void CancelReject()
    {
        if (_disposed) return;
        showRejectModal = false;
        selectedSlot = null;
        selectedAssignment = null;
        rejectReason = string.Empty;
    }

    private async Task ConfirmReject()
    {
        if (_disposed || selectedAssignment == null) return;

        if (string.IsNullOrWhiteSpace(rejectReason))
        {
            await ShowError("Please provide a reason for rejection.");
            return;
        }

        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            await AssignmentService.RejectAsync(selectedAssignment.Id, userId, rejectReason);
            if (_disposed) return;

            await ShowSuccess("Assignment rejected successfully!");
            await LoadPlannedSlots();
            if (_disposed) return;

            showRejectModal = false;
            selectedSlot = null;
            selectedAssignment = null;
            rejectReason = string.Empty;
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error rejecting assignment: {ex.Message}");
        }
    }

    // Approve/Decline from Grid 2
    private void ShowApproveAssignmentConfirmation(ActualAssignmentDto assignment)
    {
        if (_disposed) return;
        selectedAssignment = assignment;
        showApproveAssignmentDialog = true;
    }

    private void CancelApproveAssignment()
    {
        if (_disposed) return;
        showApproveAssignmentDialog = false;
        selectedAssignment = null;
    }

    private async Task ConfirmApproveAssignment()
    {
        if (_disposed || selectedAssignment == null) return;

        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            await AssignmentService.ApproveAsync(selectedAssignment.Id, userId);
            if (_disposed) return;

            await ShowSuccess("Assignment approved successfully!");

            // Refresh both grids and KPIs
            await RefreshGridsAndKpis();
            if (_disposed) return;

            showApproveAssignmentDialog = false;
            selectedAssignment = null;
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error approving assignment: {ex.Message}");
        }
    }

    private void ShowDeclineAssignmentConfirmation(ActualAssignmentDto assignment)
    {
        if (_disposed) return;
        selectedAssignment = assignment;
        declineReason = string.Empty;
        showDeclineAssignmentDialog = true;
    }

    private void CancelDeclineAssignment()
    {
        if (_disposed) return;
        showDeclineAssignmentDialog = false;
        selectedAssignment = null;
        declineReason = string.Empty;
    }

    private async Task ConfirmDeclineAssignment()
    {
        if (_disposed || selectedAssignment == null) return;

        if (string.IsNullOrWhiteSpace(declineReason))
        {
            await ShowError("Please provide a reason for declining the assignment.");
            return;
        }

        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            await AssignmentService.DeclineAsync(selectedAssignment.Id, userId, declineReason);
            if (_disposed) return;

            await ShowSuccess("Assignment declined successfully!");

            // Refresh both grids and KPIs
            await RefreshGridsAndKpis();
            if (_disposed) return;

            showDeclineAssignmentDialog = false;
            selectedAssignment = null;
            declineReason = string.Empty;
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error declining assignment: {ex.Message}");
        }
    }

    private async Task RefreshGridsAndKpis()
    {
        if (_disposed) return;

        // Reload planned slots (Grid 1) - this also reloads KPIs
        await LoadPlannedSlots();
        if (_disposed) return;

        // Reload assignments for selected slot (Grid 2) if slot is selected
        if (selectedSlot != null)
        {
            try
            {
                isLoadingAssignments = true;
                slotAssignments = await AssignmentService.GetAssignmentsBySlotAsync(selectedSlot.Id, selectedSlot.RoleId);
                if (_disposed) return;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                if (_disposed) return;
                await ShowError($"Error reloading assignments: {ex.Message}");
            }
            finally
            {
                if (!_disposed)
                {
                    isLoadingAssignments = false;
                }
            }
        }
    }

    private void ShowDeleteConfirmation(PlannedTeamSlotDto slot)
    {
        if (_disposed) return;
        selectedSlot = slot;
        showDeleteDialog = true;
    }

    private void CancelDelete()
    {
        if (_disposed) return;
        showDeleteDialog = false;
        selectedSlot = null;
    }

    private async Task ConfirmDelete()
    {
        if (_disposed) return;

        if (selectedSlot != null)
        {
            try
            {
                var currentUser = await CurrentUserService.GetCurrentUserAsync();
                var userId = currentUser?.Id ?? "System";
                await PlannedTeamSlotService.DeleteSlotAsync(selectedSlot.Id, userId);
                if (_disposed) return;

                await LoadPlannedSlots();
                if (_disposed) return;

                await ShowSuccess("Planning slot deleted successfully!");
            }
            catch (Exception ex)
            {
                if (_disposed) return;
                await ShowError($"Error deleting planning slot: {ex.Message}");
            }
        }

        if (!_disposed)
        {
            showDeleteDialog = false;
            selectedSlot = null;
        }
    }

    private string GetStatusBadgeClass(PlannedTeamStatus status)
        => status switch
        {
            PlannedTeamStatus.Planned => "bg-secondary",
            PlannedTeamStatus.Active => "bg-success",
            PlannedTeamStatus.Completed => "bg-primary",
            PlannedTeamStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };

    // Edit Assignment Methods
    private async Task ShowEditAssignmentModal(ActualAssignmentDto assignment)
    {
        if (_disposed) return;

        selectedAssignment = assignment;
        editAssignmentRequest = new UpdateActualAssignmentCommand
        {
            Id = assignment.Id,
            StartDate = assignment.StartDate,
            EndDate = assignment.EndDate,
            AllocationPercent = assignment.AllocationPercent,
            Notes = assignment.Notes ?? string.Empty,
            SnapshotSalary = assignment.SnapshotSalary,
            SnapshotMonthlyIncentive = assignment.SnapshotMonthlyIncentive,
            SnapshotCommissionPercent = assignment.SnapshotCommissionPercent,
            SnapshotTickets = assignment.SnapshotTickets,
            SnapshotHoteling = assignment.SnapshotHoteling,
            SnapshotOthers = assignment.SnapshotOthers
        };

        showEditAssignmentModal = true;
    }

    private void HideEditAssignmentModal()
    {
        if (_disposed) return;
        showEditAssignmentModal = false;
        selectedAssignment = null;
        editAssignmentRequest = new UpdateActualAssignmentCommand();
    }

    private async Task HandleEditAssignmentSubmit()
    {
        if (_disposed) return;

        isEditAssignmentSubmitting = true;
        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            // Telemetry: Log edit action start
            Console.WriteLine($"[Telemetry] Assignment.Edit started - AssignmentId: {editAssignmentRequest.Id}, UserId: {userId}");

            var result = await AssignmentService.UpdateAsync(editAssignmentRequest, userId);

            if (_disposed) return;

            if (result.IsSuccessful)
            {
                // Telemetry: Log edit action success
                Console.WriteLine($"[Telemetry] Assignment.Edit succeeded - AssignmentId: {editAssignmentRequest.Id}, UserId: {userId}, Timestamp: {DateTime.UtcNow}");

                if (result.Warnings.Any())
                {
                    var warns = string.Join("<br/>", result.Warnings);
                    await ShowSuccess($"Assignment updated successfully.<br/>Warnings:<br/>{warns}");
                }
                else
                {
                    await ShowSuccess("Assignment updated successfully!");
                }

                HideEditAssignmentModal();
                await LoadPlannedSlots();
                if (selectedSlot != null)
                {
                    await LoadSlotAssignments();
                }
            }
            else
            {
                // Telemetry: Log edit action failure
                var errorsText = string.Join(", ", result.Errors);
                Console.WriteLine($"[Telemetry] Assignment.Edit failed - AssignmentId: {editAssignmentRequest.Id}, UserId: {userId}, Errors: {errorsText}, Timestamp: {DateTime.UtcNow}");

                var errors = string.Join("<br/>", result.Errors);
                await ShowError($"Failed to update assignment:<br/>{errors}");
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;

            // Telemetry: Log edit action error
            Console.WriteLine($"[Telemetry] Assignment.Edit exception - AssignmentId: {editAssignmentRequest.Id}, Error: {ex.Message}, Timestamp: {DateTime.UtcNow}");

            await ShowError($"Error updating assignment: {ex.Message}");
        }
        finally
        {
            if (!_disposed) isEditAssignmentSubmitting = false;
        }
    }

    // Role Change Handler for Planning Slot Modal
    private async Task OnRoleChanged(ChangeEventArgs<Guid, RolesCatalogDto> args)
    {
        if (_disposed || isEdit) return;

        slotRequest.RoleId = args.Value;

        if (args.Value != Guid.Empty)
        {
            try
            {
                var role = await RolesCatalogService.GetByIdAsync(args.Value);

                if (_disposed) return;

                if (role != null)
                {
                    // Auto-fill salary, incentives, and commissions from role defaults
                    slotRequest.PlannedSalary = role.DefaultSalary;
                    slotRequest.PlannedIncentive = role.DefaultMonthlyIncentive;
                    slotRequest.PlannedCommissionPercent = role.CommissionPercent;

                    if (!_disposed)
                    {
                        StateHasChanged();
                    }
                }
            }
            catch (Exception ex)
            {
                if (_disposed) return;
                Console.WriteLine($"[Warning] Could not fetch role defaults: {ex.Message}");
            }
        }
    }

    private async Task ResetToRoleDefaults()
    {
        if (_disposed || slotRequest.RoleId == Guid.Empty) return;

        try
        {
            var role = await RolesCatalogService.GetByIdAsync(slotRequest.RoleId);

            if (_disposed) return;

            if (role != null)
            {
                slotRequest.PlannedSalary = role.DefaultSalary;
                slotRequest.PlannedIncentive = role.DefaultMonthlyIncentive;
                slotRequest.PlannedCommissionPercent = role.CommissionPercent;

                if (!_disposed)
                {
                    StateHasChanged();
                    await ShowSuccess("Reset to role defaults successfully!");
                }
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            await ShowError($"Error resetting to role defaults: {ex.Message}");
        }
    }

    // Delete Assignment Methods
    private void ShowDeleteAssignmentConfirmation(ActualAssignmentDto assignment)
    {
        if (_disposed) return;
        selectedAssignment = assignment;
        showDeleteAssignmentDialog = true;
    }

    private void CancelDeleteAssignment()
    {
        if (_disposed) return;
        showDeleteAssignmentDialog = false;
        selectedAssignment = null;
    }

    private async Task ConfirmDeleteAssignment()
    {
        if (_disposed || selectedAssignment == null) return;

        try
        {
            var currentUser = await CurrentUserService.GetCurrentUserAsync();
            var userId = currentUser?.Id ?? "System";

            // Telemetry: Log delete action start
            Console.WriteLine($"[Telemetry] Assignment.Delete started - AssignmentId: {selectedAssignment.Id}, UserId: {userId}");

            await AssignmentService.DeleteAsync(selectedAssignment.Id, userId);

            if (_disposed) return;

            // Telemetry: Log delete action success
            Console.WriteLine($"[Telemetry] Assignment.Delete succeeded - AssignmentId: {selectedAssignment.Id}, UserId: {userId}, Timestamp: {DateTime.UtcNow}");

            await ShowSuccess("Assignment deleted successfully!");
            showDeleteAssignmentDialog = false;
            selectedAssignment = null;

            await LoadPlannedSlots();
            if (selectedSlot != null)
            {
                await LoadSlotAssignments();
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;

            // Telemetry: Log delete action error
            Console.WriteLine($"[Telemetry] Assignment.Delete exception - AssignmentId: {selectedAssignment?.Id}, Error: {ex.Message}, Timestamp: {DateTime.UtcNow}");

            await ShowError($"Error deleting assignment: {ex.Message}");
        }
    }

    private async Task ShowSuccess(string message)
    {
        if (_disposed || toastObj is null) return;
        try
        {
            await toastObj.ShowAsync(new ToastModel
            {
                Title = "Success",
                Content = message,
                CssClass = "e-toast-success",
                Icon = "fas fa-check"
            });
        }
        catch when (_disposed) { }
    }

    private async Task ShowError(string message)
    {
        if (_disposed || toastObj is null) return;
        try
        {
            await toastObj.ShowAsync(new ToastModel
            {
                Title = "Error",
                Content = message,
                CssClass = "e-toast-danger",
                Icon = "fas fa-exclamation-triangle"
            });
        }
        catch when (_disposed) { }
    }

    public ValueTask DisposeAsync()
    {
        _disposed = true;
        try { _cts.Cancel(); _cts.Dispose(); } catch { }
        return ValueTask.CompletedTask;
    }
}
