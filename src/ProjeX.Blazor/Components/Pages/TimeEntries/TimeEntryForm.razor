@page "/time-entries/create"
@page "/time-entries/edit/{id:guid}"
@using Microsoft.AspNetCore.Authorization
@using LastMinute.Consultancy.Application.TimeEntry
@using LastMinute.Consultancy.Application.TimeEntry.Commands
@using LastMinute.Consultancy.Domain.Enums
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Calendars
@attribute [Authorize]
@inject ITimeEntryService TimeEntryService
@inject NavigationManager Navigation

<PageTitle>@(IsEdit ? "Edit Time Entry" : "Log Time") - ProjeX</PageTitle>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4>@(IsEdit ? "Edit Time Entry" : "Log Time")</h4>
            </div>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="date" class="form-label">Date *</label>
                                <SfDatePicker id="date" @bind-Value="model.Date" CssClass="form-control"></SfDatePicker>
                                <ValidationMessage For="@(() => model.Date)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="hours" class="form-label">Hours *</label>
                                <InputNumber id="hours" class="form-control" @bind-Value="model.Hours" step="0.25" />
                                <ValidationMessage For="@(() => model.Hours)" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description *</label>
                        <InputTextArea id="description" class="form-control" rows="4" @bind-Value="model.Description" />
                        <ValidationMessage For="@(() => model.Description)" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3 form-check">
                                <InputCheckbox id="isBillable" class="form-check-input" @bind-Value="model.IsBillable" />
                                <label for="isBillable" class="form-check-label">Is Billable</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="billableRate" class="form-label">Billable Rate</label>
                                <InputNumber id="billableRate" class="form-control" @bind-Value="model.BillableRate" />
                                <ValidationMessage For="@(() => model.BillableRate)" />
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">
                            <i class="fas fa-times me-2"></i>Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="fas fa-save me-2"></i>
                            }
                            @(IsEdit ? "Update" : "Log") Time
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Help</h5>
            </div>
            <div class="card-body">
                <p><strong>Hours:</strong> Enter time in decimal format (e.g., 1.5 for 1 hour 30 minutes).</p>
                <p><strong>Description:</strong> Provide details about the work performed.</p>
                <p><strong>Billable:</strong> Check if this time should be billed to the client.</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid? Id { get; set; }

    private TimeEntryFormModel model = new();
    private bool isSubmitting = false;

    private bool IsEdit => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit && Id.HasValue)
        {
            await LoadTimeEntry(Id.Value);
        }
        else
        {
            model.Date = DateTime.Today;
        }
    }

    private async Task LoadTimeEntry(Guid id)
    {
        try
        {
            var timeEntry = await TimeEntryService.GetByIdAsync(id);
            if (timeEntry != null)
            {
                model = new TimeEntryFormModel
                {
                    Id = timeEntry.Id,
                    ActualAssignmentId = timeEntry.ActualAssignmentId,
                    Date = timeEntry.Date,
                    Hours = timeEntry.Hours,
                    Description = timeEntry.Description,
                    IsBillable = timeEntry.IsBillable,
                    BillableRate = timeEntry.BillableRate
                };
            }
            else
            {
                Navigation.NavigateTo("/time-entries");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading time entry: {ex.Message}");
            Navigation.NavigateTo("/time-entries");
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            if (IsEdit)
            {
                var updateCommand = new UpdateTimeEntryCommand
                {
                    Id = model.Id,
                    ActualAssignmentId = model.ActualAssignmentId,
                    Date = model.Date,
                    Hours = model.Hours,
                    Description = model.Description,
                    IsBillable = model.IsBillable,
                    BillableRate = model.BillableRate
                };
                await TimeEntryService.UpdateAsync(updateCommand, "current-user"); // TODO: Get actual user ID
            }
            else
            {
                var createCommand = new CreateTimeEntryCommand
                {
                    ActualAssignmentId = model.ActualAssignmentId,
                    Date = model.Date,
                    Hours = model.Hours,
                    Description = model.Description,
                    IsBillable = model.IsBillable,
                    BillableRate = model.BillableRate
                };
                await TimeEntryService.CreateAsync(createCommand, "current-user"); // TODO: Get actual user ID
            }

            Navigation.NavigateTo("/time-entries");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving time entry: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/time-entries");
    }

    public class TimeEntryFormModel
    {
        public Guid Id { get; set; }
        
        [Required(ErrorMessage = "Assignment is required")]
        public Guid ActualAssignmentId { get; set; } = Guid.NewGuid(); // TODO: Replace with actual assignment selection
        
        [Required(ErrorMessage = "Date is required")]
        public DateTime Date { get; set; } = DateTime.Today;
        
        [Required(ErrorMessage = "Hours is required")]
        [Range(0.25, 24.0, ErrorMessage = "Hours must be between 0.25 and 24.0")]
        public decimal Hours { get; set; }
        
        [Required(ErrorMessage = "Description is required")]
        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string Description { get; set; } = string.Empty;
        
        public bool IsBillable { get; set; } = true;
        
        [Range(0, double.MaxValue, ErrorMessage = "Billable rate must be positive")]
        public decimal? BillableRate { get; set; }
    }
}

